// Internal action code for project customBB

package myp;

import edu.geog.geocog.csml.model.CSMLRegion;
import edu.geog.geocog.csml.model.CSMLQualityDimension;
import edu.geog.geocog.csml.model.CSMLDomain;
import edu.geog.geocog.csml.model.CSMLModel;
import edu.geog.geocog.csml.reasoner.CSMLConceptualSpaceReasoner;
import edu.geog.geocog.csml.model.CSMLPoint;
import edu.geog.geocog.csml.model.CSMLInstance;

import jason.*;
import jason.asSemantics.*;
import jason.asSyntax.*;
import jason.bb.*;

import jason.stdlib.*;

import java.util.*;

public class getObjectConcept extends DefaultInternalAction {

    @Override
    public Object execute(TransitionSystem ts, Unifier un, Term[] args) throws Exception {
        // execute the internal action
    	try {
    		int i=0, flag=0;
			StringTerm result =  new StringTermImpl();
    		// 1. gets the arguments as typed terms
    		StringTerm p1x = (StringTerm)args[0];
			String s = p1x.getString();
			String[] parts = s.split(",");
			String obj_center = parts[0]+"_center";
			String obj_id="";
			
			for (Literal b: ts.getAg().getBB()) {
                 if ((b.getFunctor().equals(obj_center)) &&
					(b.getTerm(1).equals(parts[2])) &&
				    (b.getTerm(2).equals(parts[3])))  
				     
				 {
					result = (StringTerm)(b.getTerm(0));
					flag=1;
			     } 
             }
			 
			 if (flag==1){
			      obj_id = result.getString();		 
			 }else{
			 
			 for (Literal bel: ts.getAg().getBB()) {
				 if (bel.getFunctor().equals(parts[0])){
				   i++;
				 }
			     obj_id = parts[0]+Integer.toString(i);
			 
			 
			 }
			}
			StringTerm result2 =  new StringTermImpl(obj_id);
    		return un.unifies(result2,args[1]);
    		} catch (ArrayIndexOutOfBoundsException e) {
    		throw new JasonException("The internal action distance"+
    		"has not received five arguments!");
    		} catch (ClassCastException e) {
    		throw new JasonException("The internal action distance"+
    		"has received arguments that are not numbers!");
    		} catch (Exception e) {
    		throw new JasonException("Error in distance");
    		}
    	 	
    }
}
