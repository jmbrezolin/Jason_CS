/**
 * Copyright (c) 2009, Benjamin Adams
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Benjamin Adams nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

 * THIS SOFTWARE IS PROVIDED BY Benjamin Adams ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Benjamin Adams BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * @author Ben
 */

/*
 * CSKBEditorApplication.java
 *
 * Created on Jul 19, 2009, 9:22:12 PM
 */

package edu.geog.geocog.csml.gui;

import edu.geog.geocog.csml.CSMLParser;
import edu.geog.geocog.csml.model.CSMLConcept;
import edu.geog.geocog.csml.model.CSMLModel;
import edu.geog.geocog.csml.reasoner.CSMLConceptualSpaceReasoner;
import edu.geog.geocog.csml.model.CSMLDomain;
import edu.geog.geocog.csml.model.CSMLDomainTypeContext;
import edu.geog.geocog.csml.model.CSMLInstance;
import edu.geog.geocog.csml.Logger;
import edu.geog.geocog.csml.model.CSMLPoint;
import edu.geog.geocog.csml.model.CSMLQualityDimension;
import edu.geog.geocog.csml.model.CSMLQualityDimensionTypeContext;
import edu.geog.geocog.csml.model.CSML;
import edu.geog.geocog.csml.model.Scale;
import edu.geog.geocog.csml.utils.CSMLFileFilter;
import edu.geog.geocog.csml.utils.JTextFieldFilter;
import java.awt.CardLayout;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Ben
 */
public class CSKBEditorApplication extends javax.swing.JFrame {

    private CSMLModel model;
    private CSMLConceptualSpaceReasoner reasoner;
    private File fileChooserCurrentDir = null;

    private boolean domainModified = false;
    private boolean conceptModified = false;
    private boolean instanceModified = false;
    private boolean contrastClassModified = false;
    private boolean contextModified = false;

    private CSMLDomain prevDomainSelection = null;

    /** Creates new form CSKBEditorApplication */
    public CSKBEditorApplication() {
        model = new CSMLModel();
        model.setcsmlBase("http://www.example.com/example.csml#");
        reasoner = new CSMLConceptualSpaceReasoner(model);
        //initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
/*    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        qDimScaleButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        mainPanelTabbedPane = new javax.swing.JTabbedPane();
        conceptualSpacePanel = new javax.swing.JPanel();
        conceptualSpaceSplitPane = new javax.swing.JSplitPane();
        conceptualSpacePanel1 = new javax.swing.JPanel();
        baseURILabel = new javax.swing.JLabel();
        baseURITextField = new javax.swing.JTextField();
        conceptualSpacePanel2 = new javax.swing.JPanel();
        conceptualSpaceMetricsPanel = new javax.swing.JPanel();
        conceptualSpaceMetricsScrollPane = new javax.swing.JScrollPane();
        conceptualSpaceMetricsTable = new javax.swing.JTable();
        domainPanel = new javax.swing.JPanel();
        domainSplitPane = new javax.swing.JSplitPane();
        domainLeftPanel = new javax.swing.JPanel();
        domainLeftScrollPane = new javax.swing.JScrollPane();
        domainList = new javax.swing.JList();
        addDomainButton = new javax.swing.JButton();
        deleteDomainButton = new javax.swing.JButton();
        moveDomainUpButton = new javax.swing.JButton();
        moveDomainDownButton = new javax.swing.JButton();
        domainRightPanel = new javax.swing.JPanel();
        domainLabelLabel = new javax.swing.JLabel();
        domainDescriptionLabel = new javax.swing.JLabel();
        domainLabelTextField = new javax.swing.JTextField();
        domainDescriptionScrollPane = new javax.swing.JScrollPane();
        domainDescriptionEditorPane = new javax.swing.JEditorPane();
        qDimLabel = new javax.swing.JLabel();
        qDimLabelScrollPane = new javax.swing.JScrollPane();
        qDimList = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        qDimLabelLabel = new javax.swing.JLabel();
        qDimLabelTextField = new javax.swing.JTextField();
        qDimDescriptionLabel = new javax.swing.JLabel();
        qDimDescriptionScrollPane = new javax.swing.JScrollPane();
        qDimDescriptionEditorPane = new javax.swing.JEditorPane();
        domainURILabel = new javax.swing.JLabel();
        refactorDomainURIButton = new javax.swing.JButton();
        qDimURILabel = new javax.swing.JLabel();
        refactorQDimURIButton = new javax.swing.JButton();
        domainRightBottomPadLabel = new javax.swing.JLabel();
        qDimButtonsPanel = new javax.swing.JPanel();
        addQDimButton = new javax.swing.JButton();
        deleteQDimButton = new javax.swing.JButton();
        moveQDimUpButton = new javax.swing.JButton();
        moveQDimDownButton = new javax.swing.JButton();
        qDimOptionsPanel = new javax.swing.JPanel();
        rangePanel = new javax.swing.JPanel();
        qDimMaxLabel = new javax.swing.JLabel();
        qDimMinLabel = new javax.swing.JLabel();
        qDimMaxTextField = new javax.swing.JTextField();
        qDimMinTextField = new javax.swing.JTextField();
        scalePanel = new javax.swing.JPanel();
        qDimScaleIntervalRadioButton = new javax.swing.JRadioButton();
        qDimScaleOrdinalRadioButton = new javax.swing.JRadioButton();
        qDimScaleRatioRadioButton = new javax.swing.JRadioButton();
        qDimUnitsLabel = new javax.swing.JLabel();
        qDimUnitsTextField = new javax.swing.JTextField();
        qDimCircularCheckBox = new javax.swing.JCheckBox();
        conceptPanel = new javax.swing.JPanel();
        conceptSplitPane = new javax.swing.JSplitPane();
        conceptRightPanel = new javax.swing.JPanel();
        conceptDescriptionLabel = new javax.swing.JLabel();
        conceptDescriptionScrollPane = new javax.swing.JScrollPane();
        conceptDescriptionEditorPane = new javax.swing.JEditorPane();
        conceptLabelLabel = new javax.swing.JLabel();
        conceptLabelTextField = new javax.swing.JTextField();
        refactorConceptURIButton = new javax.swing.JButton();
        conceptURILabel = new javax.swing.JLabel();
        conceptRightBottomPadLabel = new javax.swing.JLabel();
        regionsPanel = new javax.swing.JPanel();
        regionsScrollPane = new javax.swing.JScrollPane();
        regionsTable = new javax.swing.JTable();
        addRegionButton = new javax.swing.JButton();
        deleteRegionButton = new javax.swing.JButton();
        conceptLeftPanel = new javax.swing.JPanel();
        addConceptButton = new javax.swing.JButton();
        deleteConceptButton = new javax.swing.JButton();
        moveConceptUpButton = new javax.swing.JButton();
        moveConceptDownButton = new javax.swing.JButton();
        conceptLeftScrollPane = new javax.swing.JScrollPane();
        conceptList = new javax.swing.JList();
        instancePanel = new javax.swing.JPanel();
        instanceSplitPane = new javax.swing.JSplitPane();
        instanceLeftPanel = new javax.swing.JPanel();
        addInstanceButton = new javax.swing.JButton();
        deleteInstanceButton = new javax.swing.JButton();
        moveInstanceUpButton = new javax.swing.JButton();
        moveInstanceDownButton = new javax.swing.JButton();
        instanceLeftScrollPane = new javax.swing.JScrollPane();
        instanceList = new javax.swing.JList();
        instanceRightPanel = new javax.swing.JPanel();
        instanceLabelLabel = new javax.swing.JLabel();
        instanceDescriptionLabel = new javax.swing.JLabel();
        instanceLabelTextField = new javax.swing.JTextField();
        instanceDescriptionScrollPane = new javax.swing.JScrollPane();
        instanceDescriptionEditorPane = new javax.swing.JEditorPane();
        refactorInstanceURIButton = new javax.swing.JButton();
        instanceURILabel = new javax.swing.JLabel();
        pointsPanel = new javax.swing.JPanel();
        pointsScrollPane = new javax.swing.JScrollPane();
        pointsTable = new javax.swing.JTable();
        pointEditorPanel = new javax.swing.JPanel();
        pointEditorScrollPane = new javax.swing.JScrollPane();
        pointEditorTable = new javax.swing.JTable();
        refactorPointURIButton = new javax.swing.JButton();
        pointURILabel = new javax.swing.JLabel();
        addPointButton = new javax.swing.JButton();
        deletePointButton = new javax.swing.JButton();
        instanceRightBottomPadLabel = new javax.swing.JLabel();
        contrastClassPanel = new javax.swing.JPanel();
        contextPanel = new javax.swing.JPanel();
        contextSplitPane = new javax.swing.JSplitPane();
        contextLeftPanel = new javax.swing.JPanel();
        contextTypeComboBox = new javax.swing.JComboBox();
        contextLeftScrollPane = new javax.swing.JScrollPane();
        contextList = new javax.swing.JList();
        addContextButton = new javax.swing.JButton();
        deleteContextButton = new javax.swing.JButton();
        contextRightPanel = new javax.swing.JPanel();
        domainTypeContextPanel = new javax.swing.JPanel();
        refactorDomainTypeContextURIButton = new javax.swing.JButton();
        domainTypeContextURILabel = new javax.swing.JLabel();
        domainTypeContextLabelLabel = new javax.swing.JLabel();
        domainTypeContextLabelTextField = new javax.swing.JTextField();
        domainTypeContextDescriptionLabel = new javax.swing.JLabel();
        domainTypeContextDescriptionScrollPane = new javax.swing.JScrollPane();
        domainTypeContextDescriptionEditorPane = new javax.swing.JEditorPane();
        qDimTypeContextPanel = new javax.swing.JPanel();
        instanceTypeContextPanel = new javax.swing.JPanel();
        conceptTypeContextPanel = new javax.swing.JPanel();
        blankContextPanel = new javax.swing.JPanel();
        reasonerPanel = new javax.swing.JPanel();
        operationsComboBox = new javax.swing.JComboBox();
        operationPanel = new javax.swing.JPanel();
        similarityPanel = new javax.swing.JPanel();
        similarityFirstElementPanel = new javax.swing.JPanel();
        similarityFirstElementFilterPanel = new javax.swing.JPanel();
        similarityFirstElementFilterComboBox = new javax.swing.JComboBox();
        similarityFirstElementSelectorPanel = new javax.swing.JPanel();
        similarityFirstElementSelectorComboBox = new javax.swing.JComboBox();
        similaritySecondElementPanel = new javax.swing.JPanel();
        similaritySecondElementFilterPanel = new javax.swing.JPanel();
        similaritySecondElementFilterComboBox = new javax.swing.JComboBox();
        similaritySecondElementSelectorPanel = new javax.swing.JPanel();
        similaritySecondElementSelectorComboBox = new javax.swing.JComboBox();
        similarityContextPanel = new javax.swing.JPanel();
        similarityContextScrollPane = new javax.swing.JScrollPane();
        similarityContextTable = new javax.swing.JTable();
        similarityDomainTypeContextPanel = new javax.swing.JPanel();
        similarityDomainTypeContextComboBox = new javax.swing.JComboBox();
        similarityCustomDomainTypeContextButton = new javax.swing.JButton();
        similarityEditQDimTypeContextButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        similarityOptionsPanel = new javax.swing.JPanel();
        similaritySensitivityParameterLabel = new javax.swing.JLabel();
        similaritySensitivityParameterTextField = new javax.swing.JTextField();
        similarityFunctionComboBox = new javax.swing.JComboBox();
        similarityFunctionLabel = new javax.swing.JLabel();
        similarityNormalizationPanel = new javax.swing.JPanel();
        similarityNormalizeCheckBox = new javax.swing.JCheckBox();
        similarityNormalizationTypeComboBox = new javax.swing.JComboBox();
        similarityFunctionIconLabel = new javax.swing.JLabel();
        useConceptPrototypeCheckBox = new javax.swing.JCheckBox();
        calculateSimilarityButton = new javax.swing.JButton();
        simLabel = new javax.swing.JLabel();
        conceptCombinationPanel = new javax.swing.JPanel();
        convexHullPanel = new javax.swing.JPanel();
        voronoiTessellationPanel = new javax.swing.JPanel();
        visualizerPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileNewMenuItem = new javax.swing.JMenuItem();
        fileOpenMenuItem = new javax.swing.JMenuItem();
        fileSaveMenuItem = new javax.swing.JMenuItem();
        fileSaveAsMenuItem = new javax.swing.JMenuItem();
        fileExitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        domainsCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        conceptsCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        instancesCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        contrastClassCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        contextsCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        reasonerCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Virunga - Conceptual Spaces Knowledge Base Editor and Reasoner");

        mainPanelTabbedPane.setPreferredSize(new java.awt.Dimension(800, 600));

        conceptualSpacePanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                conceptualSpacePanelComponentShown(evt);
            }
        });

        conceptualSpaceSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        baseURILabel.setText("Base URI:");

        baseURITextField.setText("http://www.example.org/example.csml");

        javax.swing.GroupLayout conceptualSpacePanel1Layout = new javax.swing.GroupLayout(conceptualSpacePanel1);
        conceptualSpacePanel1.setLayout(conceptualSpacePanel1Layout);
        conceptualSpacePanel1Layout.setHorizontalGroup(
            conceptualSpacePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptualSpacePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(baseURILabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(baseURITextField, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(194, Short.MAX_VALUE))
        );
        conceptualSpacePanel1Layout.setVerticalGroup(
            conceptualSpacePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptualSpacePanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conceptualSpacePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(baseURILabel)
                    .addComponent(baseURITextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        conceptualSpaceSplitPane.setTopComponent(conceptualSpacePanel1);

        conceptualSpaceMetricsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Metrics"));

        conceptualSpaceMetricsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Domain count", new Integer(0)},
                {"Concept count", new Integer(0)},
                {"Instance count", new Integer(0)},
                {"Contrast class count", new Integer(0)},
                {"Context count", new Integer(0)}
            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        conceptualSpaceMetricsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        conceptualSpaceMetricsTable.getTableHeader().setReorderingAllowed(false);
        conceptualSpaceMetricsScrollPane.setViewportView(conceptualSpaceMetricsTable);
        conceptualSpaceMetricsTable.getColumnModel().getColumn(0).setResizable(false);
        conceptualSpaceMetricsTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        conceptualSpaceMetricsTable.getColumnModel().getColumn(1).setResizable(false);
        conceptualSpaceMetricsTable.getColumnModel().getColumn(1).setPreferredWidth(50);

        javax.swing.GroupLayout conceptualSpaceMetricsPanelLayout = new javax.swing.GroupLayout(conceptualSpaceMetricsPanel);
        conceptualSpaceMetricsPanel.setLayout(conceptualSpaceMetricsPanelLayout);
        conceptualSpaceMetricsPanelLayout.setHorizontalGroup(
            conceptualSpaceMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptualSpaceMetricsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conceptualSpaceMetricsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        conceptualSpaceMetricsPanelLayout.setVerticalGroup(
            conceptualSpaceMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptualSpaceMetricsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conceptualSpaceMetricsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout conceptualSpacePanel2Layout = new javax.swing.GroupLayout(conceptualSpacePanel2);
        conceptualSpacePanel2.setLayout(conceptualSpacePanel2Layout);
        conceptualSpacePanel2Layout.setHorizontalGroup(
            conceptualSpacePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptualSpacePanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conceptualSpaceMetricsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(666, Short.MAX_VALUE))
        );
        conceptualSpacePanel2Layout.setVerticalGroup(
            conceptualSpacePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptualSpacePanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(conceptualSpaceMetricsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(396, Short.MAX_VALUE))
        );

        conceptualSpaceSplitPane.setRightComponent(conceptualSpacePanel2);

        javax.swing.GroupLayout conceptualSpacePanelLayout = new javax.swing.GroupLayout(conceptualSpacePanel);
        conceptualSpacePanel.setLayout(conceptualSpacePanelLayout);
        conceptualSpacePanelLayout.setHorizontalGroup(
            conceptualSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(conceptualSpaceSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 941, Short.MAX_VALUE)
        );
        conceptualSpacePanelLayout.setVerticalGroup(
            conceptualSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptualSpacePanelLayout.createSequentialGroup()
                .addComponent(conceptualSpaceSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanelTabbedPane.addTab("Active Conceptual Space", conceptualSpacePanel);

        domainSplitPane.setPreferredSize(new java.awt.Dimension(800, 600));

        domainLeftPanel.setPreferredSize(new java.awt.Dimension(210, 428));
        domainLeftPanel.setLayout(new java.awt.GridBagLayout());

        domainLeftScrollPane.setToolTipText("Domain labels");

        domainListModel = new javax.swing.DefaultListModel();
        domainList.setModel(domainListModel);
        domainList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                domainListValueChanged(evt);
            }
        });
        domainLeftScrollPane.setViewportView(domainList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        domainLeftPanel.add(domainLeftScrollPane, gridBagConstraints);

        addDomainButton.setText("+");
        addDomainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDomainButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        domainLeftPanel.add(addDomainButton, gridBagConstraints);

        deleteDomainButton.setText("-");
        deleteDomainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDomainButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        domainLeftPanel.add(deleteDomainButton, gridBagConstraints);

        moveDomainUpButton.setText("^");
        moveDomainUpButton.setEnabled(false);
        moveDomainUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDomainUpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        domainLeftPanel.add(moveDomainUpButton, gridBagConstraints);

        moveDomainDownButton.setText("v");
        moveDomainDownButton.setEnabled(false);
        moveDomainDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDomainDownButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        domainLeftPanel.add(moveDomainDownButton, gridBagConstraints);

        domainSplitPane.setLeftComponent(domainLeftPanel);

        domainRightPanel.setMinimumSize(new java.awt.Dimension(200, 100));
        domainRightPanel.setPreferredSize(new java.awt.Dimension(700, 546));
        domainRightPanel.setLayout(new java.awt.GridBagLayout());

        domainLabelLabel.setText("Label:");
        domainLabelLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        domainRightPanel.add(domainLabelLabel, gridBagConstraints);

        domainDescriptionLabel.setText("Description:");
        domainDescriptionLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        domainRightPanel.add(domainDescriptionLabel, gridBagConstraints);

        domainLabelTextField.getDocument().addDocumentListener(new DomainLabelDocumentListener());
        domainLabelTextField.setToolTipText("Edit current domain's label");
        domainLabelTextField.setEnabled(false);
        domainLabelTextField.setMinimumSize(new java.awt.Dimension(475, 28));
        domainLabelTextField.setPreferredSize(new java.awt.Dimension(475, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        domainRightPanel.add(domainLabelTextField, gridBagConstraints);

        domainDescriptionScrollPane.setMinimumSize(new java.awt.Dimension(475, 100));
        domainDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(475, 100));

        domainDescriptionEditorPane.getDocument().addDocumentListener(new DomainDescriptionDocumentListener());
        domainDescriptionEditorPane.setEnabled(false);
        domainDescriptionEditorPane.setPreferredSize(new java.awt.Dimension(475, 100));
        domainDescriptionScrollPane.setViewportView(domainDescriptionEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        domainRightPanel.add(domainDescriptionScrollPane, gridBagConstraints);

        qDimLabel.setText("Quality dimensions:");
        qDimLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        domainRightPanel.add(qDimLabel, gridBagConstraints);

        qDimLabelScrollPane.setMinimumSize(new java.awt.Dimension(600, 120));
        qDimLabelScrollPane.setPreferredSize(new java.awt.Dimension(606, 120));

        qDimListModel = new javax.swing.DefaultListModel();
        qDimList.setModel(qDimListModel);
        qDimList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        qDimList.setEnabled(false);
        qDimList.setPreferredSize(new java.awt.Dimension(590, 100));
        qDimList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                qDimListValueChanged(evt);
            }
        });
        qDimLabelScrollPane.setViewportView(qDimList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        domainRightPanel.add(qDimLabelScrollPane, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        domainRightPanel.add(jSeparator1, gridBagConstraints);

        qDimLabelLabel.setText("Q Dim Label:");
        qDimLabelLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        domainRightPanel.add(qDimLabelLabel, gridBagConstraints);

        qDimLabelTextField.getDocument().addDocumentListener(new QDimLabelDocumentListener());
        qDimLabelTextField.setEnabled(false);
        qDimLabelTextField.setMinimumSize(new java.awt.Dimension(475, 28));
        qDimLabelTextField.setPreferredSize(new java.awt.Dimension(475, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        domainRightPanel.add(qDimLabelTextField, gridBagConstraints);

        qDimDescriptionLabel.setText("Description:");
        qDimDescriptionLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        domainRightPanel.add(qDimDescriptionLabel, gridBagConstraints);

        qDimDescriptionScrollPane.setMinimumSize(new java.awt.Dimension(475, 100));
        qDimDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(475, 100));

        qDimDescriptionEditorPane.getDocument().addDocumentListener(new QDimDescriptionDocumentListener());
        qDimDescriptionEditorPane.setEnabled(false);
        qDimDescriptionEditorPane.setPreferredSize(new java.awt.Dimension(475, 100));
        qDimDescriptionScrollPane.setViewportView(qDimDescriptionEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        domainRightPanel.add(qDimDescriptionScrollPane, gridBagConstraints);

        domainURILabel.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        domainURILabel.setText("http://www.example.org/example.csml#Domain1");
        domainURILabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        domainRightPanel.add(domainURILabel, gridBagConstraints);

        refactorDomainURIButton.setText("Refactor URI");
        refactorDomainURIButton.setToolTipText("Refactor domain URI in knowledge base");
        refactorDomainURIButton.setEnabled(false);
        refactorDomainURIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refactorDomainURIButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        domainRightPanel.add(refactorDomainURIButton, gridBagConstraints);

        qDimURILabel.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        qDimURILabel.setText("http://example.com/example.csml#QDim1");
        qDimURILabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        domainRightPanel.add(qDimURILabel, gridBagConstraints);

        refactorQDimURIButton.setText("Refactor URI");
        refactorQDimURIButton.setToolTipText("Refactor quality dimension URI in knowledge base");
        refactorQDimURIButton.setEnabled(false);
        refactorQDimURIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refactorQDimURIButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        domainRightPanel.add(refactorQDimURIButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        domainRightPanel.add(domainRightBottomPadLabel, gridBagConstraints);

        qDimButtonsPanel.setPreferredSize(new java.awt.Dimension(100, 29));

        addQDimButton.setText("+");
        addQDimButton.setToolTipText("Add new quality dimension");
        addQDimButton.setEnabled(false);
        addQDimButton.setPreferredSize(new java.awt.Dimension(40, 29));
        addQDimButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQDimButtonActionPerformed(evt);
            }
        });

        deleteQDimButton.setText("-");
        deleteQDimButton.setToolTipText("Delete selected quality dimension");
        deleteQDimButton.setEnabled(false);
        deleteQDimButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteQDimButtonActionPerformed(evt);
            }
        });

        moveQDimUpButton.setText("^");
        moveQDimUpButton.setEnabled(false);
        moveQDimUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveQDimUpButtonActionPerformed(evt);
            }
        });

        moveQDimDownButton.setText("v");
        moveQDimDownButton.setEnabled(false);
        moveQDimDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveQDimDownButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout qDimButtonsPanelLayout = new javax.swing.GroupLayout(qDimButtonsPanel);
        qDimButtonsPanel.setLayout(qDimButtonsPanelLayout);
        qDimButtonsPanelLayout.setHorizontalGroup(
            qDimButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qDimButtonsPanelLayout.createSequentialGroup()
                .addComponent(addQDimButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteQDimButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveQDimUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveQDimDownButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(253, 253, 253))
        );
        qDimButtonsPanelLayout.setVerticalGroup(
            qDimButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qDimButtonsPanelLayout.createSequentialGroup()
                .addGroup(qDimButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addQDimButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteQDimButton)
                    .addComponent(moveQDimUpButton)
                    .addComponent(moveQDimDownButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        domainRightPanel.add(qDimButtonsPanel, gridBagConstraints);

        rangePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Range"));

        qDimMaxLabel.setText("Max:");
        qDimMaxLabel.setEnabled(false);

        qDimMinLabel.setText("Min:");
        qDimMinLabel.setEnabled(false);

        JTextFieldFilter maxFilter = new JTextFieldFilter(JTextFieldFilter.FLOAT);
        maxFilter.setNegativeAccepted(true);
        qDimMaxTextField.setDocument(maxFilter);
        qDimMaxTextField.getDocument().addDocumentListener(new QDimMaxDocumentListener());
        qDimMaxTextField.setEnabled(false);

        JTextFieldFilter minFilter = new JTextFieldFilter(JTextFieldFilter.FLOAT);
        minFilter.setNegativeAccepted(true);
        qDimMinTextField.setDocument(minFilter);
        qDimMinTextField.getDocument().addDocumentListener(new QDimMinDocumentListener());
        qDimMinTextField.setEnabled(false);

        javax.swing.GroupLayout rangePanelLayout = new javax.swing.GroupLayout(rangePanel);
        rangePanel.setLayout(rangePanelLayout);
        rangePanelLayout.setHorizontalGroup(
            rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rangePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qDimMaxLabel)
                    .addComponent(qDimMinLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(qDimMaxTextField)
                    .addComponent(qDimMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        rangePanelLayout.setVerticalGroup(
            rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rangePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qDimMinLabel)
                    .addComponent(qDimMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qDimMaxLabel)
                    .addComponent(qDimMaxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        scalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale"));

        qDimScaleButtonGroup.add(qDimScaleIntervalRadioButton);
        qDimScaleIntervalRadioButton.setText("Interval");
        qDimScaleIntervalRadioButton.setEnabled(false);
        qDimScaleIntervalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qDimScaleIntervalRadioButtonActionPerformed(evt);
            }
        });

        qDimScaleButtonGroup.add(qDimScaleOrdinalRadioButton);
        qDimScaleOrdinalRadioButton.setText("Ordinal");
        qDimScaleOrdinalRadioButton.setEnabled(false);

        qDimScaleButtonGroup.add(qDimScaleRatioRadioButton);
        qDimScaleRatioRadioButton.setText("Ratio");
        qDimScaleRatioRadioButton.setEnabled(false);
        qDimScaleRatioRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qDimScaleRatioRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scalePanelLayout = new javax.swing.GroupLayout(scalePanel);
        scalePanel.setLayout(scalePanelLayout);
        scalePanelLayout.setHorizontalGroup(
            scalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scalePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qDimScaleIntervalRadioButton)
                    .addComponent(qDimScaleRatioRadioButton)
                    .addComponent(qDimScaleOrdinalRadioButton))
                .addContainerGap())
        );
        scalePanelLayout.setVerticalGroup(
            scalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scalePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(qDimScaleIntervalRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qDimScaleRatioRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qDimScaleOrdinalRadioButton)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        qDimUnitsLabel.setText("Units:");
        qDimUnitsLabel.setEnabled(false);

        qDimUnitsTextField.getDocument().addDocumentListener(new QDimUnitsDocumentListener());
        qDimUnitsTextField.setEnabled(false);
        qDimUnitsTextField.setMinimumSize(new java.awt.Dimension(120, 28));
        qDimUnitsTextField.setPreferredSize(new java.awt.Dimension(120, 28));
        qDimUnitsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qDimUnitsTextFieldActionPerformed(evt);
            }
        });

        qDimCircularCheckBox.setText("Circular");
        qDimCircularCheckBox.setEnabled(false);
        qDimCircularCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qDimCircularCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout qDimOptionsPanelLayout = new javax.swing.GroupLayout(qDimOptionsPanel);
        qDimOptionsPanel.setLayout(qDimOptionsPanelLayout);
        qDimOptionsPanelLayout.setHorizontalGroup(
            qDimOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(qDimOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scalePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rangePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(qDimOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(qDimOptionsPanelLayout.createSequentialGroup()
                        .addComponent(qDimUnitsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qDimUnitsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                    .addComponent(qDimCircularCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        qDimOptionsPanelLayout.setVerticalGroup(
            qDimOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, qDimOptionsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(qDimOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(qDimOptionsPanelLayout.createSequentialGroup()
                        .addGroup(qDimOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qDimUnitsLabel)
                            .addComponent(qDimUnitsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(qDimCircularCheckBox))
                    .addGroup(qDimOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scalePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rangePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        domainRightPanel.add(qDimOptionsPanel, gridBagConstraints);

        domainSplitPane.setRightComponent(domainRightPanel);

        javax.swing.GroupLayout domainPanelLayout = new javax.swing.GroupLayout(domainPanel);
        domainPanel.setLayout(domainPanelLayout);
        domainPanelLayout.setHorizontalGroup(
            domainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainPanelLayout.createSequentialGroup()
                .addComponent(domainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addContainerGap())
        );
        domainPanelLayout.setVerticalGroup(
            domainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainPanelLayout.createSequentialGroup()
                .addComponent(domainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanelTabbedPane.addTab("Domains", domainPanel);

        conceptRightPanel.setPreferredSize(new java.awt.Dimension(700, 690));
        conceptRightPanel.setLayout(new java.awt.GridBagLayout());

        conceptDescriptionLabel.setText("Description:");
        conceptDescriptionLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        conceptRightPanel.add(conceptDescriptionLabel, gridBagConstraints);

        conceptDescriptionScrollPane.setMinimumSize(new java.awt.Dimension(475, 100));
        conceptDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(475, 100));

        conceptDescriptionEditorPane.getDocument().addDocumentListener(new ConceptDescriptionDocumentListener());
        conceptDescriptionEditorPane.setEnabled(false);
        conceptDescriptionEditorPane.setMinimumSize(new java.awt.Dimension(475, 16));
        conceptDescriptionEditorPane.setPreferredSize(new java.awt.Dimension(475, 100));
        conceptDescriptionScrollPane.setViewportView(conceptDescriptionEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        conceptRightPanel.add(conceptDescriptionScrollPane, gridBagConstraints);

        conceptLabelLabel.setText("Label:");
        conceptLabelLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        conceptRightPanel.add(conceptLabelLabel, gridBagConstraints);

        conceptLabelTextField.getDocument().addDocumentListener(new ConceptLabelDocumentListener());
        conceptLabelTextField.setToolTipText("Edit current domain's label");
        conceptLabelTextField.setEnabled(false);
        conceptLabelTextField.setMinimumSize(new java.awt.Dimension(475, 28));
        conceptLabelTextField.setPreferredSize(new java.awt.Dimension(475, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        conceptRightPanel.add(conceptLabelTextField, gridBagConstraints);

        refactorConceptURIButton.setText("Refactor URI");
        refactorConceptURIButton.setToolTipText("Refactor domain URI in knowledge base");
        refactorConceptURIButton.setEnabled(false);
        refactorConceptURIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refactorConceptURIButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        conceptRightPanel.add(refactorConceptURIButton, gridBagConstraints);

        conceptURILabel.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        conceptURILabel.setText("http://www.example.org/example.csml#Concept1");
        conceptURILabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        conceptRightPanel.add(conceptURILabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        conceptRightPanel.add(conceptRightBottomPadLabel, gridBagConstraints);

        regionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Regions"));
        regionsPanel.setMinimumSize(new java.awt.Dimension(600, 200));

        regionsScrollPane.setPreferredSize(new java.awt.Dimension(454, 304));

        regionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Domain", "Region"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        regionsTable.setEnabled(false);
        regionsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        regionsScrollPane.setViewportView(regionsTable);
        regionsTable.getColumnModel().getColumn(0).setPreferredWidth(75);

        javax.swing.GroupLayout regionsPanelLayout = new javax.swing.GroupLayout(regionsPanel);
        regionsPanel.setLayout(regionsPanelLayout);
        regionsPanelLayout.setHorizontalGroup(
            regionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
            .addGroup(regionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(regionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE))
        );
        regionsPanelLayout.setVerticalGroup(
            regionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
            .addGroup(regionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(regionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        conceptRightPanel.add(regionsPanel, gridBagConstraints);

        addRegionButton.setText("Add region...");
        addRegionButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        conceptRightPanel.add(addRegionButton, gridBagConstraints);

        deleteRegionButton.setText("Delete region");
        deleteRegionButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        conceptRightPanel.add(deleteRegionButton, gridBagConstraints);

        conceptSplitPane.setRightComponent(conceptRightPanel);

        conceptLeftPanel.setLayout(new java.awt.GridBagLayout());

        addConceptButton.setText("+");
        addConceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addConceptButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        conceptLeftPanel.add(addConceptButton, gridBagConstraints);

        deleteConceptButton.setText("-");
        conceptLeftPanel.add(deleteConceptButton, new java.awt.GridBagConstraints());

        moveConceptUpButton.setText("^");
        moveConceptUpButton.setEnabled(false);
        moveConceptUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveConceptUpButtonActionPerformed(evt);
            }
        });
        conceptLeftPanel.add(moveConceptUpButton, new java.awt.GridBagConstraints());

        moveConceptDownButton.setText("v");
        moveConceptDownButton.setEnabled(false);
        moveConceptDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveConceptDownButtonActionPerformed(evt);
            }
        });
        conceptLeftPanel.add(moveConceptDownButton, new java.awt.GridBagConstraints());

        conceptListModel = new javax.swing.DefaultListModel();
        conceptList.setModel(conceptListModel);
        conceptList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        conceptList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                conceptListValueChanged(evt);
            }
        });
        conceptLeftScrollPane.setViewportView(conceptList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        conceptLeftPanel.add(conceptLeftScrollPane, gridBagConstraints);

        conceptSplitPane.setLeftComponent(conceptLeftPanel);

        javax.swing.GroupLayout conceptPanelLayout = new javax.swing.GroupLayout(conceptPanel);
        conceptPanel.setLayout(conceptPanelLayout);
        conceptPanelLayout.setHorizontalGroup(
            conceptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(conceptSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 941, Short.MAX_VALUE)
        );
        conceptPanelLayout.setVerticalGroup(
            conceptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conceptPanelLayout.createSequentialGroup()
                .addComponent(conceptSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanelTabbedPane.addTab("Concepts", conceptPanel);

        instancePanel.setPreferredSize(new java.awt.Dimension(987, 759));

        instanceSplitPane.setDividerLocation(275);
        instanceSplitPane.setMinimumSize(new java.awt.Dimension(0, 33));
        instanceSplitPane.setPreferredSize(new java.awt.Dimension(800, 759));

        instanceLeftPanel.setLayout(new java.awt.GridBagLayout());

        addInstanceButton.setText("+");
        addInstanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInstanceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        instanceLeftPanel.add(addInstanceButton, gridBagConstraints);

        deleteInstanceButton.setText("-");
        deleteInstanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteInstanceButtonActionPerformed(evt);
            }
        });
        instanceLeftPanel.add(deleteInstanceButton, new java.awt.GridBagConstraints());

        moveInstanceUpButton.setText("^");
        moveInstanceUpButton.setEnabled(false);
        moveInstanceUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveInstanceUpButtonActionPerformed(evt);
            }
        });
        instanceLeftPanel.add(moveInstanceUpButton, new java.awt.GridBagConstraints());

        moveInstanceDownButton.setText("v");
        moveInstanceDownButton.setEnabled(false);
        moveInstanceDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveInstanceDownButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        instanceLeftPanel.add(moveInstanceDownButton, gridBagConstraints);

        instanceListModel = new javax.swing.DefaultListModel();
        instanceList.setModel(instanceListModel);
        instanceList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        instanceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                instanceListValueChanged(evt);
            }
        });
        instanceLeftScrollPane.setViewportView(instanceList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        instanceLeftPanel.add(instanceLeftScrollPane, gridBagConstraints);

        instanceSplitPane.setLeftComponent(instanceLeftPanel);

        instanceRightPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        instanceRightPanel.setLayout(new java.awt.GridBagLayout());

        instanceLabelLabel.setText("Label:");
        instanceLabelLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        instanceRightPanel.add(instanceLabelLabel, gridBagConstraints);

        instanceDescriptionLabel.setText("Description:");
        instanceDescriptionLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        instanceRightPanel.add(instanceDescriptionLabel, gridBagConstraints);

        instanceLabelTextField.getDocument().addDocumentListener(new InstanceLabelDocumentListener());
        instanceLabelTextField.setToolTipText("Edit current domain's label");
        instanceLabelTextField.setEnabled(false);
        instanceLabelTextField.setMinimumSize(new java.awt.Dimension(475, 28));
        instanceLabelTextField.setPreferredSize(new java.awt.Dimension(475, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        instanceRightPanel.add(instanceLabelTextField, gridBagConstraints);

        instanceDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(475, 100));

        instanceDescriptionEditorPane.getDocument().addDocumentListener(new InstanceDescriptionDocumentListener());
        instanceDescriptionEditorPane.setEnabled(false);
        instanceDescriptionEditorPane.setMinimumSize(new java.awt.Dimension(475, 100));
        instanceDescriptionEditorPane.setPreferredSize(new java.awt.Dimension(475, 100));
        instanceDescriptionScrollPane.setViewportView(instanceDescriptionEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        instanceRightPanel.add(instanceDescriptionScrollPane, gridBagConstraints);

        refactorInstanceURIButton.setText("Refactor URI");
        refactorInstanceURIButton.setToolTipText("Refactor domain URI in knowledge base");
        refactorInstanceURIButton.setEnabled(false);
        refactorInstanceURIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refactorInstanceURIButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        instanceRightPanel.add(refactorInstanceURIButton, gridBagConstraints);

        instanceURILabel.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        instanceURILabel.setText("http://www.example.org/example.csml#Instance1");
        instanceURILabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        instanceRightPanel.add(instanceURILabel, gridBagConstraints);

        pointsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Points"));
        pointsPanel.setMinimumSize(new java.awt.Dimension(600, 200));
        pointsPanel.setPreferredSize(new java.awt.Dimension(600, 200));

        pointsScrollPane.setPreferredSize(new java.awt.Dimension(454, 304));

        pointsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Domain", "Point"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pointsTable.getSelectionModel().addListSelectionListener(new PointsListSelectionListener());
        pointsTable.setEnabled(false);
        pointsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pointsScrollPane.setViewportView(pointsTable);
        pointsTable.getColumnModel().getColumn(0).setPreferredWidth(75);

        javax.swing.GroupLayout pointsPanelLayout = new javax.swing.GroupLayout(pointsPanel);
        pointsPanel.setLayout(pointsPanelLayout);
        pointsPanelLayout.setHorizontalGroup(
            pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
            .addGroup(pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pointsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE))
        );
        pointsPanelLayout.setVerticalGroup(
            pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
            .addGroup(pointsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pointsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        instanceRightPanel.add(pointsPanel, gridBagConstraints);

        pointEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Point editor"));
        pointEditorPanel.setMinimumSize(new java.awt.Dimension(600, 200));
        pointEditorPanel.setPreferredSize(new java.awt.Dimension(600, 200));

        pointEditorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Quality Dimension", "Value", "Units", "Min", "Max"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pointEditorTable.getModel().addTableModelListener(new PointEditorTableModelListener());
        pointEditorTable.setEnabled(false);
        pointEditorTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        pointEditorScrollPane.setViewportView(pointEditorTable);

        refactorPointURIButton.setText("Refactor URI");
        refactorPointURIButton.setEnabled(false);

        pointURILabel.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        pointURILabel.setText("http://www.example.org/example.csml#Point1");
        pointURILabel.setEnabled(false);

        javax.swing.GroupLayout pointEditorPanelLayout = new javax.swing.GroupLayout(pointEditorPanel);
        pointEditorPanel.setLayout(pointEditorPanelLayout);
        pointEditorPanelLayout.setHorizontalGroup(
            pointEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointEditorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pointEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pointEditorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addGroup(pointEditorPanelLayout.createSequentialGroup()
                        .addComponent(refactorPointURIButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pointURILabel)
                        .addContainerGap(210, Short.MAX_VALUE))))
        );
        pointEditorPanelLayout.setVerticalGroup(
            pointEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pointEditorPanelLayout.createSequentialGroup()
                .addGroup(pointEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pointURILabel)
                    .addComponent(refactorPointURIButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pointEditorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        instanceRightPanel.add(pointEditorPanel, gridBagConstraints);

        addPointButton.setText("Add point...");
        addPointButton.setEnabled(false);
        addPointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPointButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        instanceRightPanel.add(addPointButton, gridBagConstraints);

        deletePointButton.setText("Delete point");
        deletePointButton.setEnabled(false);
        deletePointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePointButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        instanceRightPanel.add(deletePointButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        instanceRightPanel.add(instanceRightBottomPadLabel, gridBagConstraints);

        instanceSplitPane.setRightComponent(instanceRightPanel);

        javax.swing.GroupLayout instancePanelLayout = new javax.swing.GroupLayout(instancePanel);
        instancePanel.setLayout(instancePanelLayout);
        instancePanelLayout.setHorizontalGroup(
            instancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 941, Short.MAX_VALUE)
            .addGroup(instancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(instanceSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 941, Short.MAX_VALUE))
        );
        instancePanelLayout.setVerticalGroup(
            instancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
            .addGroup(instancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(instancePanelLayout.createSequentialGroup()
                    .addComponent(instanceSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        mainPanelTabbedPane.addTab("Instances", instancePanel);

        javax.swing.GroupLayout contrastClassPanelLayout = new javax.swing.GroupLayout(contrastClassPanel);
        contrastClassPanel.setLayout(contrastClassPanelLayout);
        contrastClassPanelLayout.setHorizontalGroup(
            contrastClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 941, Short.MAX_VALUE)
        );
        contrastClassPanelLayout.setVerticalGroup(
            contrastClassPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );

        mainPanelTabbedPane.addTab("Contrast Classes", contrastClassPanel);

        contextLeftPanel.setLayout(new java.awt.GridBagLayout());

        contextTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Domain type", "Quality Dimension type", "Instance type", "Concept type" }));
        contextTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contextTypeComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        contextLeftPanel.add(contextTypeComboBox, gridBagConstraints);

        contextLeftScrollPane.setAlignmentX(0.0F);
        contextLeftScrollPane.setAlignmentY(0.0F);

        contextListModel = new javax.swing.DefaultListModel();
        contextList.setModel(contextListModel);
        contextList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        contextList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                contextListValueChanged(evt);
            }
        });
        contextLeftScrollPane.setViewportView(contextList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 0, 0);
        contextLeftPanel.add(contextLeftScrollPane, gridBagConstraints);

        addContextButton.setText("+");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        contextLeftPanel.add(addContextButton, gridBagConstraints);

        deleteContextButton.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        contextLeftPanel.add(deleteContextButton, gridBagConstraints);

        contextSplitPane.setLeftComponent(contextLeftPanel);

        contextRightPanel.setLayout(new java.awt.CardLayout());

        refactorDomainTypeContextURIButton.setText("Refactor URI");
        refactorDomainTypeContextURIButton.setToolTipText("Refactor domain URI in knowledge base");
        refactorDomainTypeContextURIButton.setEnabled(false);
        refactorDomainTypeContextURIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refactorDomainTypeContextURIButtonActionPerformed(evt);
            }
        });

        domainTypeContextURILabel.setFont(new java.awt.Font("Lucida Grande", 1, 10));
        domainTypeContextURILabel.setText("http://www.example.org/example.csml#DomainTypeContext1");
        domainTypeContextURILabel.setEnabled(false);

        domainTypeContextLabelLabel.setText("Label:");
        domainTypeContextLabelLabel.setEnabled(false);

        domainTypeContextLabelTextField.getDocument().addDocumentListener(new DomainTypeContextLabelDocumentListener());
        domainTypeContextLabelTextField.setToolTipText("Edit current domain's label");
        domainTypeContextLabelTextField.setEnabled(false);

        domainTypeContextDescriptionLabel.setText("Description:");
        domainTypeContextDescriptionLabel.setEnabled(false);

        domainTypeContextDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(100, 20));

        domainTypeContextDescriptionEditorPane.getDocument().addDocumentListener(new DomainTypeContextDescriptionDocumentListener());
        domainTypeContextDescriptionEditorPane.setEnabled(false);
        domainTypeContextDescriptionScrollPane.setViewportView(domainTypeContextDescriptionEditorPane);

        javax.swing.GroupLayout domainTypeContextPanelLayout = new javax.swing.GroupLayout(domainTypeContextPanel);
        domainTypeContextPanel.setLayout(domainTypeContextPanelLayout);
        domainTypeContextPanelLayout.setHorizontalGroup(
            domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainTypeContextPanelLayout.createSequentialGroup()
                .addGroup(domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(domainTypeContextPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(domainTypeContextDescriptionLabel)
                            .addComponent(domainTypeContextLabelLabel)))
                    .addComponent(refactorDomainTypeContextURIButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(domainTypeContextURILabel, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(domainTypeContextDescriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addComponent(domainTypeContextLabelTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                .addContainerGap())
        );
        domainTypeContextPanelLayout.setVerticalGroup(
            domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(domainTypeContextPanelLayout.createSequentialGroup()
                .addGroup(domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domainTypeContextURILabel)
                    .addComponent(refactorDomainTypeContextURIButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(domainTypeContextLabelLabel)
                    .addComponent(domainTypeContextLabelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(domainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(domainTypeContextDescriptionLabel)
                    .addComponent(domainTypeContextDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(472, Short.MAX_VALUE))
        );

        contextRightPanel.add(domainTypeContextPanel, "Domain type");

        javax.swing.GroupLayout qDimTypeContextPanelLayout = new javax.swing.GroupLayout(qDimTypeContextPanel);
        qDimTypeContextPanel.setLayout(qDimTypeContextPanelLayout);
        qDimTypeContextPanelLayout.setHorizontalGroup(
            qDimTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );
        qDimTypeContextPanelLayout.setVerticalGroup(
            qDimTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        contextRightPanel.add(qDimTypeContextPanel, "Quality Dimension type");

        javax.swing.GroupLayout instanceTypeContextPanelLayout = new javax.swing.GroupLayout(instanceTypeContextPanel);
        instanceTypeContextPanel.setLayout(instanceTypeContextPanelLayout);
        instanceTypeContextPanelLayout.setHorizontalGroup(
            instanceTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );
        instanceTypeContextPanelLayout.setVerticalGroup(
            instanceTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        contextRightPanel.add(instanceTypeContextPanel, "Instance type");

        javax.swing.GroupLayout conceptTypeContextPanelLayout = new javax.swing.GroupLayout(conceptTypeContextPanel);
        conceptTypeContextPanel.setLayout(conceptTypeContextPanelLayout);
        conceptTypeContextPanelLayout.setHorizontalGroup(
            conceptTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );
        conceptTypeContextPanelLayout.setVerticalGroup(
            conceptTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        contextRightPanel.add(conceptTypeContextPanel, "Concept type");

        javax.swing.GroupLayout blankContextPanelLayout = new javax.swing.GroupLayout(blankContextPanel);
        blankContextPanel.setLayout(blankContextPanelLayout);
        blankContextPanelLayout.setHorizontalGroup(
            blankContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );
        blankContextPanelLayout.setVerticalGroup(
            blankContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        contextRightPanel.add(blankContextPanel, "blank");

        contextSplitPane.setRightComponent(contextRightPanel);

        javax.swing.GroupLayout contextPanelLayout = new javax.swing.GroupLayout(contextPanel);
        contextPanel.setLayout(contextPanelLayout);
        contextPanelLayout.setHorizontalGroup(
            contextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contextSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 941, Short.MAX_VALUE)
        );
        contextPanelLayout.setVerticalGroup(
            contextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contextPanelLayout.createSequentialGroup()
                .addComponent(contextSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanelTabbedPane.addTab("Contexts", contextPanel);

        operationsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Convex Hull", "Voronoi Tessellation", "Similarity", "Most Similar n", "Concept Combination" }));
        operationsComboBox.setSelectedItem("Similarity");
        operationsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationsComboBoxActionPerformed(evt);
            }
        });

        operationPanel.setLayout(new java.awt.CardLayout());

        similarityPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                similarityPanelComponentShown(evt);
            }
        });

        similarityFirstElementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("First element"));

        similarityFirstElementFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        similarityFirstElementFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Instances", "Concepts", "Concepts and Instances" }));
        similarityFirstElementFilterComboBox.setSelectedItem(null);
        similarityFirstElementFilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similarityFirstElementFilterComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout similarityFirstElementFilterPanelLayout = new javax.swing.GroupLayout(similarityFirstElementFilterPanel);
        similarityFirstElementFilterPanel.setLayout(similarityFirstElementFilterPanelLayout);
        similarityFirstElementFilterPanelLayout.setHorizontalGroup(
            similarityFirstElementFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityFirstElementFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityFirstElementFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        similarityFirstElementFilterPanelLayout.setVerticalGroup(
            similarityFirstElementFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityFirstElementFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityFirstElementFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        similarityFirstElementSelectorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Element 1 Label/Id"));

        similarityFirstElementSelectorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similarityFirstElementSelectorComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout similarityFirstElementSelectorPanelLayout = new javax.swing.GroupLayout(similarityFirstElementSelectorPanel);
        similarityFirstElementSelectorPanel.setLayout(similarityFirstElementSelectorPanelLayout);
        similarityFirstElementSelectorPanelLayout.setHorizontalGroup(
            similarityFirstElementSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityFirstElementSelectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityFirstElementSelectorComboBox, 0, 620, Short.MAX_VALUE)
                .addContainerGap())
        );
        similarityFirstElementSelectorPanelLayout.setVerticalGroup(
            similarityFirstElementSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityFirstElementSelectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityFirstElementSelectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout similarityFirstElementPanelLayout = new javax.swing.GroupLayout(similarityFirstElementPanel);
        similarityFirstElementPanel.setLayout(similarityFirstElementPanelLayout);
        similarityFirstElementPanelLayout.setHorizontalGroup(
            similarityFirstElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityFirstElementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityFirstElementFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similarityFirstElementSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        similarityFirstElementPanelLayout.setVerticalGroup(
            similarityFirstElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityFirstElementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(similarityFirstElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(similarityFirstElementSelectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(similarityFirstElementFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        similaritySecondElementPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Second element"));

        similaritySecondElementFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        similaritySecondElementFilterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Instances", "Concepts", "Concepts and Instances" }));
        similaritySecondElementFilterComboBox.setSelectedItem(null);
        similaritySecondElementFilterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similaritySecondElementFilterComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout similaritySecondElementFilterPanelLayout = new javax.swing.GroupLayout(similaritySecondElementFilterPanel);
        similaritySecondElementFilterPanel.setLayout(similaritySecondElementFilterPanelLayout);
        similaritySecondElementFilterPanelLayout.setHorizontalGroup(
            similaritySecondElementFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similaritySecondElementFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similaritySecondElementFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        similaritySecondElementFilterPanelLayout.setVerticalGroup(
            similaritySecondElementFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similaritySecondElementFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similaritySecondElementFilterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        similaritySecondElementSelectorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Element 2 Label/Id"));

        similaritySecondElementSelectorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similaritySecondElementSelectorComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout similaritySecondElementSelectorPanelLayout = new javax.swing.GroupLayout(similaritySecondElementSelectorPanel);
        similaritySecondElementSelectorPanel.setLayout(similaritySecondElementSelectorPanelLayout);
        similaritySecondElementSelectorPanelLayout.setHorizontalGroup(
            similaritySecondElementSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similaritySecondElementSelectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similaritySecondElementSelectorComboBox, 0, 620, Short.MAX_VALUE)
                .addContainerGap())
        );
        similaritySecondElementSelectorPanelLayout.setVerticalGroup(
            similaritySecondElementSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similaritySecondElementSelectorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similaritySecondElementSelectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout similaritySecondElementPanelLayout = new javax.swing.GroupLayout(similaritySecondElementPanel);
        similaritySecondElementPanel.setLayout(similaritySecondElementPanelLayout);
        similaritySecondElementPanelLayout.setHorizontalGroup(
            similaritySecondElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similaritySecondElementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similaritySecondElementFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similaritySecondElementSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        similaritySecondElementPanelLayout.setVerticalGroup(
            similaritySecondElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similaritySecondElementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(similaritySecondElementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(similaritySecondElementSelectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(similaritySecondElementFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        similarityContextPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Context"));

        similarityContextTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Domain", "Weight", "Selected", "Q Dim weights"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        similarityContextTable.getSelectionModel().addListSelectionListener(new SimilarityContextListSelectionListener());
        similarityContextTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        similarityContextTable.getTableHeader().setReorderingAllowed(false);
        similarityContextScrollPane.setViewportView(similarityContextTable);
        similarityContextTable.getColumnModel().getColumn(2).setMaxWidth(60);

        similarityDomainTypeContextPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Domain-type context"));

        similarityDomainTypeContextComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<neutral>" }));

        similarityCustomDomainTypeContextButton.setText("Custom...");

        javax.swing.GroupLayout similarityDomainTypeContextPanelLayout = new javax.swing.GroupLayout(similarityDomainTypeContextPanel);
        similarityDomainTypeContextPanel.setLayout(similarityDomainTypeContextPanelLayout);
        similarityDomainTypeContextPanelLayout.setHorizontalGroup(
            similarityDomainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityDomainTypeContextPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(similarityDomainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(similarityDomainTypeContextComboBox, 0, 203, Short.MAX_VALUE)
                    .addComponent(similarityCustomDomainTypeContextButton))
                .addContainerGap())
        );
        similarityDomainTypeContextPanelLayout.setVerticalGroup(
            similarityDomainTypeContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityDomainTypeContextPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityDomainTypeContextComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similarityCustomDomainTypeContextButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        similarityEditQDimTypeContextButton.setText("<html><center>Edit quality<br/>dimension weights</center></html>");
        similarityEditQDimTypeContextButton.setEnabled(false);
        similarityEditQDimTypeContextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similarityEditQDimTypeContextButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Set neutral");

        javax.swing.GroupLayout similarityContextPanelLayout = new javax.swing.GroupLayout(similarityContextPanel);
        similarityContextPanel.setLayout(similarityContextPanelLayout);
        similarityContextPanelLayout.setHorizontalGroup(
            similarityContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityContextPanelLayout.createSequentialGroup()
                .addComponent(similarityContextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(similarityContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(similarityEditQDimTypeContextButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similarityDomainTypeContextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        similarityContextPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, similarityEditQDimTypeContextButton});

        similarityContextPanelLayout.setVerticalGroup(
            similarityContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityContextPanelLayout.createSequentialGroup()
                .addGroup(similarityContextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(similarityContextScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(similarityContextPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(similarityEditQDimTypeContextButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(similarityDomainTypeContextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        similarityOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        similaritySensitivityParameterLabel.setText("<html>Similarity sensitivity parameter (<i>c</i>):</html>");

        similaritySensitivityParameterTextField.setText("1.0");

        similarityFunctionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exponential", "Gaussian", "Linear" }));
        similarityFunctionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                similarityFunctionComboBoxActionPerformed(evt);
            }
        });

        similarityFunctionLabel.setText("Function:");

        similarityNormalizationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Normalization"));

        similarityNormalizeCheckBox.setText("Normalize");

        similarityNormalizationTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MinMax", "z-score", "log MinMax", "log z-score" }));

        javax.swing.GroupLayout similarityNormalizationPanelLayout = new javax.swing.GroupLayout(similarityNormalizationPanel);
        similarityNormalizationPanel.setLayout(similarityNormalizationPanelLayout);
        similarityNormalizationPanelLayout.setHorizontalGroup(
            similarityNormalizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityNormalizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityNormalizeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similarityNormalizationTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        similarityNormalizationPanelLayout.setVerticalGroup(
            similarityNormalizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityNormalizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(similarityNormalizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(similarityNormalizeCheckBox)
                    .addComponent(similarityNormalizationTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        similarityFunctionIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/geog/geocog/csml/gui/sim_exp.png"))); // NOI18N

        useConceptPrototypeCheckBox.setText("Use concept prototype");

        javax.swing.GroupLayout similarityOptionsPanelLayout = new javax.swing.GroupLayout(similarityOptionsPanel);
        similarityOptionsPanel.setLayout(similarityOptionsPanelLayout);
        similarityOptionsPanelLayout.setHorizontalGroup(
            similarityOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(similarityOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(similaritySensitivityParameterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(similarityFunctionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(similarityOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(similaritySensitivityParameterTextField)
                    .addComponent(similarityFunctionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similarityFunctionIconLabel)
                .addGap(18, 18, 18)
                .addComponent(similarityNormalizationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(useConceptPrototypeCheckBox)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        similarityOptionsPanelLayout.setVerticalGroup(
            similarityOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityOptionsPanelLayout.createSequentialGroup()
                .addGroup(similarityOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(similarityOptionsPanelLayout.createSequentialGroup()
                        .addGroup(similarityOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(similaritySensitivityParameterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(similaritySensitivityParameterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(similarityOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(similarityFunctionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(similarityFunctionLabel)))
                    .addGroup(similarityOptionsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(useConceptPrototypeCheckBox)
                        .addGap(8, 8, 8)
                        .addComponent(similarityFunctionIconLabel))
                    .addComponent(similarityNormalizationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        calculateSimilarityButton.setText("Calculate similarity");
        calculateSimilarityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateSimilarityButtonActionPerformed(evt);
            }
        });

        simLabel.setBackground(new java.awt.Color(0, 0, 0));
        simLabel.setForeground(new java.awt.Color(0, 0, 153));
        simLabel.setText("<html><b>0.0</b></html>");

        javax.swing.GroupLayout similarityPanelLayout = new javax.swing.GroupLayout(similarityPanel);
        similarityPanel.setLayout(similarityPanelLayout);
        similarityPanelLayout.setHorizontalGroup(
            similarityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityPanelLayout.createSequentialGroup()
                .addComponent(similaritySecondElementPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(36, 36, 36))
            .addGroup(similarityPanelLayout.createSequentialGroup()
                .addComponent(similarityContextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(similarityPanelLayout.createSequentialGroup()
                .addComponent(similarityOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(similarityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calculateSimilarityButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(737, Short.MAX_VALUE))
            .addGroup(similarityPanelLayout.createSequentialGroup()
                .addComponent(similarityFirstElementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        similarityPanelLayout.setVerticalGroup(
            similarityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(similarityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(similarityFirstElementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similaritySecondElementPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similarityContextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(similarityOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(similarityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateSimilarityButton)
                    .addComponent(simLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(213, 213, 213))
        );

        operationPanel.add(similarityPanel, "Similarity");

        javax.swing.GroupLayout conceptCombinationPanelLayout = new javax.swing.GroupLayout(conceptCombinationPanel);
        conceptCombinationPanel.setLayout(conceptCombinationPanelLayout);
        conceptCombinationPanelLayout.setHorizontalGroup(
            conceptCombinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 935, Short.MAX_VALUE)
        );
        conceptCombinationPanelLayout.setVerticalGroup(
            conceptCombinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );

        operationPanel.add(conceptCombinationPanel, "Concept Combination");

        javax.swing.GroupLayout convexHullPanelLayout = new javax.swing.GroupLayout(convexHullPanel);
        convexHullPanel.setLayout(convexHullPanelLayout);
        convexHullPanelLayout.setHorizontalGroup(
            convexHullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 935, Short.MAX_VALUE)
        );
        convexHullPanelLayout.setVerticalGroup(
            convexHullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );

        operationPanel.add(convexHullPanel, "Convex Hull");

        javax.swing.GroupLayout voronoiTessellationPanelLayout = new javax.swing.GroupLayout(voronoiTessellationPanel);
        voronoiTessellationPanel.setLayout(voronoiTessellationPanelLayout);
        voronoiTessellationPanelLayout.setHorizontalGroup(
            voronoiTessellationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 935, Short.MAX_VALUE)
        );
        voronoiTessellationPanelLayout.setVerticalGroup(
            voronoiTessellationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );

        operationPanel.add(voronoiTessellationPanel, "card5");

        javax.swing.GroupLayout reasonerPanelLayout = new javax.swing.GroupLayout(reasonerPanel);
        reasonerPanel.setLayout(reasonerPanelLayout);
        reasonerPanelLayout.setHorizontalGroup(
            reasonerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reasonerPanelLayout.createSequentialGroup()
                .addGroup(reasonerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reasonerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(operationsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(operationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reasonerPanelLayout.setVerticalGroup(
            reasonerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reasonerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(operationsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanelTabbedPane.addTab("Reasoner", reasonerPanel);

        javax.swing.GroupLayout visualizerPanelLayout = new javax.swing.GroupLayout(visualizerPanel);
        visualizerPanel.setLayout(visualizerPanelLayout);
        visualizerPanelLayout.setHorizontalGroup(
            visualizerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 941, Short.MAX_VALUE)
        );
        visualizerPanelLayout.setVerticalGroup(
            visualizerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );

        mainPanelTabbedPane.addTab("Visualizer", visualizerPanel);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 974, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 974, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(mainPanelTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 962, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 678, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 678, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(mainPanelTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(16, Short.MAX_VALUE)))
        );

        fileMenu.setText("File");

        fileNewMenuItem.setText("New ...");
        fileNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNewMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileNewMenuItem);

        fileOpenMenuItem.setText("Open");
        fileOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileOpenMenuItem);

        fileSaveMenuItem.setText("Save");
        fileMenu.add(fileSaveMenuItem);

        fileSaveAsMenuItem.setText("Save As ...");
        fileMenu.add(fileSaveAsMenuItem);

        fileExitMenuItem.setText("Exit");
        fileExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileExitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileExitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        viewMenu.setText("View");

        domainsCheckBoxMenuItem.setSelected(true);
        domainsCheckBoxMenuItem.setText("Domains");
        viewMenu.add(domainsCheckBoxMenuItem);

        conceptsCheckBoxMenuItem.setSelected(true);
        conceptsCheckBoxMenuItem.setText("Concepts");
        viewMenu.add(conceptsCheckBoxMenuItem);

        instancesCheckBoxMenuItem.setSelected(true);
        instancesCheckBoxMenuItem.setText("Instances");
        viewMenu.add(instancesCheckBoxMenuItem);

        contrastClassCheckBoxMenuItem.setSelected(true);
        contrastClassCheckBoxMenuItem.setText("Contrast Classes");
        viewMenu.add(contrastClassCheckBoxMenuItem);

        contextsCheckBoxMenuItem.setSelected(true);
        contextsCheckBoxMenuItem.setText("Contexts");
        viewMenu.add(contextsCheckBoxMenuItem);
        viewMenu.add(jSeparator2);

        reasonerCheckBoxMenuItem.setSelected(true);
        reasonerCheckBoxMenuItem.setText("Reasoner");
        viewMenu.add(reasonerCheckBoxMenuItem);

        menuBar.add(viewMenu);

        helpMenu.setText("Help");

        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileExitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_fileExitMenuItemActionPerformed

    private void fileOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser();
        CSMLFileFilter filter = new CSMLFileFilter();
        chooser.setFileFilter(filter);
        chooser.setCurrentDirectory(fileChooserCurrentDir);
        int returnVal = chooser.showOpenDialog(null);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            CSMLParser parser = new CSMLParser(new Logger());
            CSMLModel newModel = parser.parseCSML(chooser.getSelectedFile());
            if (newModel == null) {
                JOptionPane.showMessageDialog(null, "Error parsing " + chooser.getSelectedFile().getName(), "Parsing error", JOptionPane.ERROR_MESSAGE);
            } else {
                model = newModel;
                reasoner = new CSMLConceptualSpaceReasoner(model);
                // update conceptual space tab
                baseURITextField.setText(model.getcsmlBase());
                updateConceptualSpacePanel();

                // update domains tab
                CSMLDomain[] domains = model.getDomains();
                domainListModel.removeAllElements();
                for (CSMLDomain d : domains) {
                    domainListModel.addElement(d);
                }
                
                // update concepts tab
                CSMLConcept[] concepts = model.getConcepts();
                conceptListModel.removeAllElements();
                for (CSMLConcept c : concepts) {
                    conceptListModel.addElement(c);
                }

                // update instances tab
                CSMLInstance[] instances = model.getInstances();
                instanceListModel.removeAllElements();
                for (CSMLInstance i : instances) {
                    instanceListModel.addElement(i);
                }
                reasoner.standardizeInstancesInAllDomains();

                // update contrast classes tab
                // TODO

                // update contexts tab
                // TODO

                //bottomLeftLabel.setText(chooser.getSelectedFile().getName() + " - " + domains.length + " domains");
                //redraw();
            }
            fileChooserCurrentDir = chooser.getCurrentDirectory();
        }
    }//GEN-LAST:event_fileOpenMenuItemActionPerformed

    private void addDomainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDomainButtonActionPerformed
        String newDomainId = model.getcsmlBase()+"NewDomain";
        int counter = 1;
        while (model.getDomain(newDomainId + counter) != null) {
            counter++;
        }
        newDomainId = newDomainId + counter;
      //  CSMLDomain newDomain = new CSMLDomain(newDomainId, "New Domain " + counter, "");
    //    model.addDomain(newDomain);
     //   domainListModel.addElement(newDomain);
     //   domainList.setSelectedValue(newDomain, true);
    }//GEN-LAST:event_addDomainButtonActionPerformed

    private void moveDomainUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDomainUpButtonActionPerformed
        int idx = domainList.getSelectedIndex();
        if (idx > 0) {
            CSMLDomain d = (CSMLDomain) domainListModel.get(idx);
            CSMLDomain dAbove = (CSMLDomain) domainListModel.get(idx - 1);
            domainListModel.set(idx, dAbove);
            domainListModel.set(idx - 1, d);
            domainList.setSelectedIndex(idx - 1);
        }
    }//GEN-LAST:event_moveDomainUpButtonActionPerformed

    private void addQDimButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQDimButtonActionPerformed
        CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
        String newQDimId = "NewQualityDimension";
        try {
            URI uri = new URI(d.getId());
            newQDimId = uri.getFragment() + "_" + newQDimId;
        } catch (URISyntaxException ex) {
            newQDimId = "_" + newQDimId;
        }
        newQDimId = model.getcsmlBase() + newQDimId;
        int counter = 1;
        while (model.getDomainOfQDim(newQDimId + counter) != null) {
            counter++;
        }
        newQDimId = newQDimId + counter;
      //  CSMLQualityDimension qDim = new CSMLQualityDimension(newQDimId, "New Quality Dimension " + counter, "");
    //    d.addQualityDimension(qDim);
    //    qDimListModel.addElement(qDim);
     //   qDimList.setSelectedValue(qDim, true);
    }//GEN-LAST:event_addQDimButtonActionPerformed

    private void saveDomainEditsToModel(CSMLDomain d) {
        String domainURI = domainURILabel.getText();
        if (!domainURI.equals(d.getId())) {
            model.removeDomain(d);
            d.setId(domainURI);
            model.addDomain(d);
        }
        d.setLabel(domainLabelTextField.getText());
        d.setDescription(domainDescriptionEditorPane.getText());

    /**    d.removeAllQualityDimensions();
        for (int i = 0; i < qDimListModel.getSize(); i++) {
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimListModel.get(i);

            // ERROR want to update all quality dims???
            if (qDimScaleIntervalRadioButton.isSelected()) {
                qDim.setScale(Scale.INTERVAL);
            } else if (qDimScaleRatioRadioButton.isSelected()) {
                qDim.setScale(Scale.RATIO);
            } else if (qDimScaleOrdinalRadioButton.isSelected()) {
                qDim.setScale(Scale.ORDINAL);
            }
            CSML r = new CSML();
            String minText = qDimMinTextField.getText();
            if (!minText.equals("")) {
                r.setMin(Double.parseDouble(minText));
            }
            String maxText = qDimMaxTextField.getText();
            if (!maxText.equals("")) {
                r.setMax(Double.parseDouble(maxText));
            }
            qDim.setRange(r);
            qDim.setCircular(qDimCircularCheckBox.isSelected());
            d.addQualityDimension(qDim);
        }
**/
       // domainModified = false;
     //   domainListModel.setElementAt(d, domainListModel.indexOf(d));
        // TODO quality dimensions
        //redraw();
  //  }
    /*

    private void domainListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_domainListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            if (prevDomainSelection != null && domainModified) {
                if (JOptionPane.showConfirmDialog(null, "<html>Do you want to keep changes to <b>" + prevDomainSelection.getLabel() + "</b>?</html>",
                "Confirm changes", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // save the changes
                    saveDomainEditsToModel(prevDomainSelection);
                }
            }
            int idx = domainList.getSelectedIndex();
            if (idx == -1) {
                moveDomainDownButton.setEnabled(false);
                moveDomainUpButton.setEnabled(false);
                clearDomainRightPanel();
                enableDomainRightPanel(false);
                clearQDimRightPanel();
                enableQDimRightPanel(false);
                redraw();
                prevDomainSelection = null;
            } else {
                moveDomainDownButton.setEnabled(true);
                moveDomainUpButton.setEnabled(true);
                enableDomainRightPanel(true);
                CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
                domainURILabel.setText(d.getId());
                domainLabelTextField.setText(d.getLabel());
                domainDescriptionEditorPane.setText(d.getDescription());
                String[] qDimIds = d.getQualityDimensionIds();
                qDimListModel.removeAllElements();
                for (int i = 0; i < qDimIds.length; i++) {
                    CSMLQualityDimension qDim = d.getQualityDimension(qDimIds[i]);
                    qDimListModel.addElement(qDim);
                }
                prevDomainSelection = d;
                //redraw();
            }
            domainModified = false;
        } 
    }//GEN-LAST:event_domainListValueChanged

    private void fileNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNewMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNewMenuItemActionPerformed

    private void qDimListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_qDimListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            int idx = qDimList.getSelectedIndex();
            if (idx == -1) {
                moveQDimUpButton.setEnabled(false);
                moveQDimDownButton.setEnabled(false);
                clearQDimRightPanel();
                enableQDimRightPanel(false);
            } else {
                moveQDimUpButton.setEnabled(true);
                moveQDimDownButton.setEnabled(true);
                enableQDimRightPanel(true);
                CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
                qDimURILabel.setText(qDim.getId());
                qDimLabelTextField.setText(qDim.getLabel());
                qDimDescriptionEditorPane.setText(qDim.getDescription());
                if (qDim.getScale() == Scale.INTERVAL) {
                    qDimScaleIntervalRadioButton.setSelected(true);
                } else if (qDim.getScale() == Scale.RATIO) {
                    qDimScaleRatioRadioButton.setSelected(true);
                } else if (qDim.getScale() == Scale.ORDINAL) {
                    qDimScaleOrdinalRadioButton.setSelected(true);
                }

                double min = qDim.getRange().getMin();
                if (min == CSML.DEFAULT_MIN)
                    qDimMinTextField.setText("");
                else
                    qDimMinTextField.setText(Double.toString(min));
                double max = qDim.getRange().getMax();
                if (max == CSML.DEFAULT_MAX)
                    qDimMaxTextField.setText("");
                else
                    qDimMaxTextField.setText(Double.toString(max));
                qDimCircularCheckBox.setSelected(qDim.isCircular());
                qDimUnitsTextField.setText(qDim.getUnits().getUnitsString());
            }
        }
    }//GEN-LAST:event_qDimListValueChanged

    private void deleteDomainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDomainButtonActionPerformed
        if (domainList.getSelectedIndex() != -1) {
            CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
            if (JOptionPane.showConfirmDialog(null, "<html>Are you sure you want to delete <b>" + d.getLabel() + "</b> domain?</html>",
                    "Delete confirm", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) return;
            model.removeDomain(d);
            domainListModel.removeElement(d);
        }
    }//GEN-LAST:event_deleteDomainButtonActionPerformed

    private void deleteQDimButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteQDimButtonActionPerformed
        if (qDimList.getSelectedIndex() != -1) {
            CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
            if (JOptionPane.showConfirmDialog(null, "<html>Are you sure you want to delete <b>" + qDim.getLabel() + "</b> quality dimension?</html>",
                    "Delete confirm", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) return;
            d.removeQualityDimension(qDim);
            qDimListModel.removeElement(qDim);
        }
    }//GEN-LAST:event_deleteQDimButtonActionPerformed

    private void moveDomainDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDomainDownButtonActionPerformed
        int idx = domainList.getSelectedIndex();
        if (idx != -1 && idx != domainListModel.size() - 1) {
            CSMLDomain d = (CSMLDomain) domainListModel.get(idx);
            CSMLDomain dBelow = (CSMLDomain) domainListModel.get(idx + 1);
            domainListModel.set(idx, dBelow);
            domainListModel.set(idx + 1, d);
            domainList.setSelectedIndex(idx + 1);
        }
    }//GEN-LAST:event_moveDomainDownButtonActionPerformed

    private void moveQDimUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveQDimUpButtonActionPerformed
        int idx = qDimList.getSelectedIndex();
        if (idx > 0) {
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimListModel.get(idx);
            CSMLQualityDimension qDimAbove = (CSMLQualityDimension) qDimListModel.get(idx - 1);
            qDimListModel.set(idx, qDimAbove);
            qDimListModel.set(idx - 1, qDim);
            qDimList.setSelectedIndex(idx - 1);
        }
    }//GEN-LAST:event_moveQDimUpButtonActionPerformed

    private void moveQDimDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveQDimDownButtonActionPerformed
        int idx = qDimList.getSelectedIndex();
        if (idx != -1 && idx != qDimListModel.size() - 1) {
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimListModel.get(idx);
            CSMLQualityDimension qDimBelow = (CSMLQualityDimension) qDimListModel.get(idx + 1);
            qDimListModel.set(idx, qDimBelow);
            qDimListModel.set(idx + 1, qDim);
            qDimList.setSelectedIndex(idx + 1);
        }
    }//GEN-LAST:event_moveQDimDownButtonActionPerformed

    private void qDimUnitsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qDimUnitsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qDimUnitsTextFieldActionPerformed

    private void qDimScaleIntervalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qDimScaleIntervalRadioButtonActionPerformed
        int idx = qDimList.getSelectedIndex();
        if (idx != -1) {
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimListModel.get(idx);
            qDim.setScale(Scale.INTERVAL);
        }
    }//GEN-LAST:event_qDimScaleIntervalRadioButtonActionPerformed

    private void qDimScaleRatioRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qDimScaleRatioRadioButtonActionPerformed
        int idx = qDimList.getSelectedIndex();
        if (idx != -1) {
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimListModel.get(idx);
            qDim.setScale(Scale.RATIO);
        }
    }//GEN-LAST:event_qDimScaleRatioRadioButtonActionPerformed

    private void qDimCircularCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qDimCircularCheckBoxActionPerformed
        int idx = qDimList.getSelectedIndex();
        if (idx != -1) {
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimListModel.get(idx);
            qDim.setCircular(qDimCircularCheckBox.isSelected());
        }
    }//GEN-LAST:event_qDimCircularCheckBoxActionPerformed

    private void conceptualSpacePanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_conceptualSpacePanelComponentShown
        updateConceptualSpacePanel();
    }//GEN-LAST:event_conceptualSpacePanelComponentShown

    private void refactorDomainURIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refactorDomainURIButtonActionPerformed
        if (domainList.getSelectedIndex() != -1) {
            CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
            String origId = d.getId();
            RefactorURIDialog dialog = new RefactorURIDialog(this, true, origId, model, "Domain");
            dialog.setVisible(true);
            if (dialog.getResult() == RefactorURIDialog.OK) {
                String newURI = dialog.getNewURI();
                if (!newURI.equals(d.getId())) {
                    model.removeDomain(d);
                    d.setId(newURI);
                    model.addDomain(d);
                    domainListModel.set(domainList.getSelectedIndex(), d);
                    domainURILabel.setText(newURI);

                    //if (dialog.getRefactor()) {
                      //  model.refactorDomainId(origId, newURI);
                    }
                }
            }
        }
    }//GEN-LAST:event_refactorDomainURIButtonActionPerformed

    private void addInstanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInstanceButtonActionPerformed
        String newInstanceId = model.getcsmlBase()+"NewInstance";
        int counter = 1;
        while (model.getInstance(newInstanceId + counter) != null) {
            counter++;
        }
        newInstanceId = newInstanceId + counter;
      //  CSMLInstance newInstance = new CSMLInstance(newInstanceId, "New Instance " + counter, "");
     //   model.addInstance(newInstance);
   //     instanceListModel.addElement(newInstance);
     //   instanceList.setSelectedValue(newInstance, true);
        //redraw();
    }//GEN-LAST:event_addInstanceButtonActionPerformed

    private void deleteInstanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInstanceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteInstanceButtonActionPerformed

    private void moveInstanceUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveInstanceUpButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveInstanceUpButtonActionPerformed

    private void moveInstanceDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveInstanceDownButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveInstanceDownButtonActionPerformed

    private void refactorInstanceURIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refactorInstanceURIButtonActionPerformed
        if (instanceList.getSelectedIndex() != -1) {
            CSMLInstance instance = (CSMLInstance) instanceList.getSelectedValue();
            String origId = instance.getId();
            RefactorURIDialog dialog = new RefactorURIDialog(this, true, origId, model, "Instance");
            dialog.setVisible(true);
            if (dialog.getResult() == RefactorURIDialog.OK) {
                String newURI = dialog.getNewURI();
                if (!newURI.equals(instance.getId())) {
                    model.removeInstance(instance);
                    instance.setId(newURI);
                    model.addInstance(instance);
                    instanceListModel.set(instanceList.getSelectedIndex(), instance);
                    instanceURILabel.setText(newURI);

                    if (dialog.getRefactor()) {
                        model.refactorInstanceId(origId, newURI);
                    }

                }
            }
        }
    }//GEN-LAST:event_refactorInstanceURIButtonActionPerformed

    private void refactorQDimURIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refactorQDimURIButtonActionPerformed
        if (qDimList.getSelectedIndex() != -1 && domainList.getSelectedIndex() != -1) {
            CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
            String origId = qDim.getId();
            RefactorURIDialog dialog = new RefactorURIDialog(this, true, origId, model, "Quality Dimension");
            dialog.setVisible(true);
            if (dialog.getResult() == RefactorURIDialog.OK) {
                String newURI = dialog.getNewURI();
                if (!newURI.equals(qDim.getId())) {
                    CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
                    d.removeQualityDimension(qDim);
                    qDim.setId(newURI);
                    d.addQualityDimension(qDim);
                    qDimListModel.set(qDimList.getSelectedIndex(), qDim);
                    qDimURILabel.setText(newURI);

                    if (dialog.getRefactor()) {
                        model.refactorQDimId(origId, newURI);
                    }
                }
            }
        }
    }//GEN-LAST:event_refactorQDimURIButtonActionPerformed

    private void instanceListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_instanceListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            int idx = instanceList.getSelectedIndex();
            if (idx == -1) {
                moveInstanceUpButton.setEnabled(false);
                moveInstanceDownButton.setEnabled(false);
                clearInstanceRightPanel();
                enableInstanceRightPanel(false);
            } else {
                moveInstanceUpButton.setEnabled(true);
                moveInstanceDownButton.setEnabled(true);
                enableInstanceRightPanel(true);
                CSMLInstance i = (CSMLInstance) instanceList.getSelectedValue();
                instanceURILabel.setText(i.getId());
                instanceLabelTextField.setText(i.getLabel());
                instanceDescriptionEditorPane.setText(i.getDescription());
                String[] domainIds = i.getDomainIds();
                DefaultTableModel tm = (DefaultTableModel) pointsTable.getModel();
                tm.setRowCount(0);
                for (int j = 0; j < domainIds.length; j++) {
                    CSMLDomain d = model.getDomain(domainIds[j]);
                    Object[] newRow;
                    if (d == null) {
                        newRow = new Object[] { domainIds[j], i.getPoint(domainIds[j]) };
                    } else {
                        newRow = new Object[] { d, i.getPoint(domainIds[j]) };
                    }
                    tm.addRow(newRow);
                }
                DefaultTableModel editorTM = (DefaultTableModel) pointEditorTable.getModel();
                editorTM.setNumRows(0);
            }
        }
    }//GEN-LAST:event_instanceListValueChanged

    private void similaritySecondElementSelectorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similaritySecondElementSelectorComboBoxActionPerformed
        updateSimilarityContextTable();
    }//GEN-LAST:event_similaritySecondElementSelectorComboBoxActionPerformed

    private void operationsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationsComboBoxActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        if (cb.getSelectedIndex() != -1) {
            String selection = (String) cb.getSelectedItem();
            CardLayout cl = (CardLayout) operationPanel.getLayout();
            cl.show(operationPanel, selection);
        }
    }//GEN-LAST:event_operationsComboBoxActionPerformed

    private void similarityFirstElementSelectorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similarityFirstElementSelectorComboBoxActionPerformed
        updateSimilarityContextTable();
    }//GEN-LAST:event_similarityFirstElementSelectorComboBoxActionPerformed

    private void similarityFirstElementFilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similarityFirstElementFilterComboBoxActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        if (cb.getSelectedIndex() != -1) {
            String selection = (String) cb.getSelectedItem();
            if (selection.equals("Instances")) {
                similarityFirstElementSelectorComboBox.removeAllItems();
                CSMLInstance[] iList = model.getInstances();
                for (CSMLInstance i : iList) {
                    similarityFirstElementSelectorComboBox.addItem(i);
                }
            } else if (selection.equals("Concepts")) {
                similarityFirstElementSelectorComboBox.removeAllItems();
                CSMLConcept[] cList = model.getConcepts();
                for (CSMLConcept c : cList) {
                    similarityFirstElementSelectorComboBox.addItem(c);
                }
            } else if (selection.equals("Concepts and Instances")) {
                similarityFirstElementSelectorComboBox.removeAllItems();
                CSMLInstance[] iList = model.getInstances();
                for (CSMLInstance i : iList) {
                    similarityFirstElementSelectorComboBox.addItem(i);
                }
                CSMLConcept[] cList = model.getConcepts();
                for (CSMLConcept c : cList) {
                    similarityFirstElementSelectorComboBox.addItem(c);
                }
            }
        }
    }//GEN-LAST:event_similarityFirstElementFilterComboBoxActionPerformed

    private void similarityPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_similarityPanelComponentShown
        updateSimilarityContextTable();
        updateSimilarityDomainTypeContextComboBox();
    }//GEN-LAST:event_similarityPanelComponentShown

    private void similarityFunctionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similarityFunctionComboBoxActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        if (cb.getSelectedIndex() != -1) {
            String selection = (String) cb.getSelectedItem();
            if (selection.equals("Exponential")) {
                similarityFunctionIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/geog/geocog/cs/gui/sim_exp.png")));
            } else if (selection.equals("Gaussian")) {
                similarityFunctionIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/geog/geocog/cs/gui/sim_gauss.png")));
            } else if (selection.equals("Linear")) {
                similarityFunctionIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/geog/geocog/cs/gui/sim_linear.png")));
            }
        }
    }//GEN-LAST:event_similarityFunctionComboBoxActionPerformed

    private void similaritySecondElementFilterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similaritySecondElementFilterComboBoxActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        if (cb.getSelectedIndex() != -1) {
            String selection = (String) cb.getSelectedItem();
            if (selection.equals("Instances")) {
                similaritySecondElementSelectorComboBox.removeAllItems();
                CSMLInstance[] iList = model.getInstances();
                for (CSMLInstance i : iList) {
                    similaritySecondElementSelectorComboBox.addItem(i);
                }
            } else if (selection.equals("Concepts")) {
                similaritySecondElementSelectorComboBox.removeAllItems();
                CSMLConcept[] cList = model.getConcepts();
                for (CSMLConcept c : cList) {
                    similaritySecondElementSelectorComboBox.addItem(c);
                }
            } else if (selection.equals("Concepts and Instances")) {
                similaritySecondElementSelectorComboBox.removeAllItems();
                CSMLInstance[] iList = model.getInstances();
                for (CSMLInstance i : iList) {
                    similaritySecondElementSelectorComboBox.addItem(i);
                }
                CSMLConcept[] cList = model.getConcepts();
                for (CSMLConcept c : cList) {
                    similaritySecondElementSelectorComboBox.addItem(c);
                }
            }
        }
    }//GEN-LAST:event_similaritySecondElementFilterComboBoxActionPerformed

    private void similarityEditQDimTypeContextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_similarityEditQDimTypeContextButtonActionPerformed
        int row = similarityContextTable.getSelectedRow();
        if (row != -1) {
            DefaultTableModel dtm = (DefaultTableModel) similarityContextTable.getModel();
            Object o = dtm.getValueAt(row, 3);
            EditQDimContextDialog dialog = null;
            if (o instanceof CSMLQualityDimensionTypeContext) {
                dialog = new EditQDimContextDialog(this, true, (CSMLDomain) dtm.getValueAt(row, 0), model, (CSMLQualityDimensionTypeContext) o);
            } else if (o instanceof String) {
                // neutral context (all dimensions are equally weighted)
                dialog = new EditQDimContextDialog(this, true, (CSMLDomain) dtm.getValueAt(row, 0), model, null);
            }

            if (dialog != null) {
                dialog.setVisible(true);
                if (dialog.getResult() == EditQDimContextDialog.OK) {
                    // TODO
                }
            }
        }
    }//GEN-LAST:event_similarityEditQDimTypeContextButtonActionPerformed

    private void addPointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPointButtonActionPerformed
        CSMLInstance instance = (CSMLInstance) instanceList.getSelectedValue();
        if (instance != null) {
            String[] instanceDomainIds = instance.getDomainIds();
            CSMLDomain[] modelDomains = model.getDomains();
            ArrayList<String> diffDomains = new ArrayList<String>();
            for (CSMLDomain d : modelDomains) {
                diffDomains.add(d.getId());
            }
            for (int i = 0; i < instanceDomainIds.length; i++) {
                if (diffDomains.contains(instanceDomainIds[i]))
                    diffDomains.remove(instanceDomainIds[i]);
            }
            if (diffDomains.size() > 0) {
                AddPointDialog dialog = new AddPointDialog(this, true, model, diffDomains.toArray(new String[diffDomains.size()]));
                dialog.setVisible(true);
                if (dialog.getResult() == AddPointDialog.OK) {
                    CSMLDomain d = dialog.getDomain();
                    if (d == null) return;
                    String id = dialog.getURI();
                    CSMLPoint p = new CSMLPoint(id, d.getId());
                    p.setq(d.getQualityDimensionIds());
                    double[] v = new double[d.numberOfDimensions()];
                    for (int i = 0; i < v.length; i++) {
                        v[i] = 0.0;
                    }
                    p.setv(v);
                    // update instance with new point
                    instance.addPoint(p);

                    DefaultTableModel tm = (DefaultTableModel) pointsTable.getModel();
                    Object[] newRow = new Object[] { d, p };
                    tm.addRow(newRow);
                    int lastrow = pointsTable.getRowCount() - 1;
                    pointsTable.getSelectionModel().setSelectionInterval(lastrow, lastrow);
                }
            }
        }
    }//GEN-LAST:event_addPointButtonActionPerformed

    private void contextTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contextTypeComboBoxActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        if (cb.getSelectedIndex() != -1) {
            String selection = (String) cb.getSelectedItem();
            CardLayout cl = (CardLayout) contextRightPanel.getLayout();
            cl.show(contextRightPanel, selection);
        }
    }//GEN-LAST:event_contextTypeComboBoxActionPerformed

    private void refactorDomainTypeContextURIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refactorDomainTypeContextURIButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refactorDomainTypeContextURIButtonActionPerformed

    private void contextListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_contextListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            int idx = contextList.getSelectedIndex();
            CardLayout cl = (CardLayout) contextRightPanel.getLayout();
            if (idx == -1) { // nothing selected in context list
                cl.show(contextRightPanel, "blank");
                deleteContextButton.setEnabled(false);
            } else {
                cl.show(contextRightPanel, (String) contextTypeComboBox.getSelectedItem());
                deleteContextButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_contextListValueChanged

    private void moveConceptUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveConceptUpButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveConceptUpButtonActionPerformed

    private void addConceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addConceptButtonActionPerformed
        String newConceptId = model.getcsmlBase()+"NewConcept";
        int counter = 1;
        while (model.getConcept(newConceptId + counter) != null) {
            counter++;
        }
        newConceptId = newConceptId + counter;
        //CSMLConcept newConcept = new CSMLConcept(newConceptId, "New Concept " + counter, "");
      //  model.addConcept(newConcept);
      //  conceptListModel.addElement(newConcept);
      //  conceptList.setSelectedValue(newConcept, true);
    }//GEN-LAST:event_addConceptButtonActionPerformed

    private void refactorConceptURIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refactorConceptURIButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refactorConceptURIButtonActionPerformed

    private void conceptListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_conceptListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            int idx = conceptList.getSelectedIndex();
            if (idx == -1) {
                moveConceptDownButton.setEnabled(false);
                moveConceptUpButton.setEnabled(false);
                clearConceptRightPanel();
                enableConceptRightPanel(false);
                //clearQDimRightPanel();
                //enableQDimRightPanel(false);
                redraw();
                //prevDomainSelection = null;
            } else {
                moveConceptDownButton.setEnabled(true);
                moveConceptUpButton.setEnabled(true);
                enableConceptRightPanel(true);
                CSMLConcept c = (CSMLConcept) conceptList.getSelectedValue();
                conceptURILabel.setText(c.getId());
                conceptLabelTextField.setText(c.getLabel());
                conceptDescriptionEditorPane.setText(c.getDescription());
                //String[] qDimIds = d.getQualityDimensionIds();
                //qDimListModel.removeAllElements();
                //for (int i = 0; i < qDimIds.length; i++) {
                //    CSMLQualityDimension qDim = d.getQualityDimension(qDimIds[i]);
                //    qDimListModel.addElement(qDim);
                //}
                //prevDomainSelection = d;
                //redraw();
            }
            domainModified = false;
        }         // TODO add your handling code here:
    }//GEN-LAST:event_conceptListValueChanged

    private void moveConceptDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveConceptDownButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moveConceptDownButtonActionPerformed

    private void deletePointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePointButtonActionPerformed
        int row = pointsTable.getSelectedRow();
        if (row != -1) {
            CSMLPoint p = (CSMLPoint)pointsTable.getModel().getValueAt(row, 1);
            CSMLInstance instance = (CSMLInstance) instanceList.getSelectedValue();

            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this point from instance?",
                "Delete point", JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) return;
            instance.removePoint(p);
            DefaultTableModel dtm = (DefaultTableModel)pointsTable.getModel();
            dtm.removeRow(row);

        }
    }//GEN-LAST:event_deletePointButtonActionPerformed

    private void calculateSimilarityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateSimilarityButtonActionPerformed
        Object o1 = similarityFirstElementSelectorComboBox.getSelectedItem();
        Object o2 = similaritySecondElementSelectorComboBox.getSelectedItem();
        CSMLInstance i1 = (CSMLInstance) o1;
        CSMLInstance i2 = (CSMLInstance) o2;
        try {
            Double distance = reasoner.semanticSimilarity(i1.getId(), i2.getId(), null, null);
            simLabel.setText(distance.toString());
        } catch (Exception e) {
            simLabel.setText("");
        }
    }//GEN-LAST:event_calculateSimilarityButtonActionPerformed

    private void redraw() {
        getContentPane().invalidate();
        getContentPane().validate();
    }

    private void updateConceptualSpacePanel() {
        conceptualSpaceMetricsTable.getModel().setValueAt(model.getNumberOfDomains(), 0, 1);
        conceptualSpaceMetricsTable.getModel().setValueAt(model.getNumberOfConcepts(), 1, 1);
        conceptualSpaceMetricsTable.getModel().setValueAt(model.getNumberOfInstances(), 2, 1);
        conceptualSpaceMetricsTable.getModel().setValueAt(model.getNumberOfContrastClasses(), 3, 1);
        conceptualSpaceMetricsTable.getModel().setValueAt(model.getNumberOfContexts(), 4, 1);
    }

    private void enableDomainRightPanel(boolean b) {
        domainRightPanel.setEnabled(b);
        domainURILabel.setEnabled(b);
        refactorDomainURIButton.setEnabled(b);
        domainLabelLabel.setEnabled(b);
        domainLabelTextField.setEnabled(b);
        domainDescriptionLabel.setEnabled(b);
        domainDescriptionEditorPane.setEnabled(b);
        qDimLabel.setEnabled(b);
        qDimList.setEnabled(b);
        addQDimButton.setEnabled(b);
        deleteQDimButton.setEnabled(b);
    }

    private void enableQDimRightPanel(boolean b) {
        qDimURILabel.setEnabled(b);
        refactorQDimURIButton.setEnabled(b);
        qDimLabelLabel.setEnabled(b);
        qDimLabelTextField.setEnabled(b);
        qDimDescriptionLabel.setEnabled(b);
        qDimDescriptionEditorPane.setEnabled(b);
        qDimScaleIntervalRadioButton.setEnabled(b);
        qDimScaleRatioRadioButton.setEnabled(b);
        qDimScaleOrdinalRadioButton.setEnabled(b);
        qDimMinLabel.setEnabled(b);
        qDimMinTextField.setEnabled(b);
        qDimMaxLabel.setEnabled(b);
        qDimMaxTextField.setEnabled(b);
        qDimCircularCheckBox.setEnabled(b);
        qDimUnitsLabel.setEnabled(b);
        qDimUnitsTextField.setEnabled(b);
    }

    private void clearDomainRightPanel() {
        domainURILabel.setText("");
        domainLabelTextField.setText("");
        domainDescriptionEditorPane.setText("");
        qDimListModel.removeAllElements();
    }

    private void clearQDimRightPanel() {
        qDimURILabel.setText("");
        qDimLabelTextField.setText("");
        qDimDescriptionEditorPane.setText("");
        qDimScaleIntervalRadioButton.setSelected(false);
        qDimScaleRatioRadioButton.setSelected(false);
        qDimScaleOrdinalRadioButton.setSelected(false);
        qDimMinTextField.setText("");
        qDimMaxTextField.setText("");
        qDimCircularCheckBox.setSelected(false);
    }

    private void enableConceptRightPanel(boolean b) {
        conceptRightPanel.setEnabled(b);
        conceptURILabel.setEnabled(b);
        conceptLabelLabel.setEnabled(b);
        conceptLabelTextField.setEnabled(b);
        conceptDescriptionLabel.setEnabled(b);
        conceptDescriptionEditorPane.setEnabled(b);
        refactorConceptURIButton.setEnabled(b);
    }

    private void clearConceptRightPanel() {
        conceptURILabel.setText("");
        conceptLabelTextField.setText("");
        conceptDescriptionEditorPane.setText("");
    }

    private void enableInstanceRightPanel(boolean b) {
        instanceRightPanel.setEnabled(b);
        instanceURILabel.setEnabled(b);
        instanceLabelLabel.setEnabled(b);
        instanceLabelTextField.setEnabled(b);
        instanceDescriptionLabel.setEnabled(b);
        instanceDescriptionEditorPane.setEnabled(b);
        refactorInstanceURIButton.setEnabled(b);
        pointsTable.setEnabled(b);
        addPointButton.setEnabled(b);
    }

    private void clearInstanceRightPanel() {
        instanceURILabel.setText("");
        instanceLabelTextField.setText("");
        instanceDescriptionEditorPane.setText("");
    }

    private void enablePointEditor(boolean b) {
        refactorPointURIButton.setEnabled(b);
        pointURILabel.setEnabled(b);
        pointEditorTable.setEnabled(b);
    }

    private void clearPointEditor() {
        
    }

    private void updateSimilarityContextTable() {
        //DefaultListModel dlm = (DefaultListModel) similarityAllDomainsList.getModel();
        DefaultTableModel dtm = (DefaultTableModel) similarityContextTable.getModel();
        dtm.setRowCount(0);
        //dlm.setSize(0);
        int idx1 = similarityFirstElementSelectorComboBox.getSelectedIndex();
        int idx2 = similaritySecondElementSelectorComboBox.getSelectedIndex();
        if (idx1 != -1) {
            Object o1 = similarityFirstElementSelectorComboBox.getSelectedItem();
            if (idx2 != -1) {
                Object o2 = similaritySecondElementSelectorComboBox.getSelectedItem();
                if (o1 instanceof CSMLInstance && o2 instanceof CSMLInstance) {
                    ArrayList<CSMLDomain> sharedDomains = reasoner.sharedDomains((CSMLInstance) o1, (CSMLInstance) o2);
                    for (CSMLDomain d : sharedDomains) {
                        //dlm.addElement(d);
                        dtm.addRow(new Object[] {d, new Double(1./sharedDomains.size()), new Boolean(true), "<neutral>"});
                    }
                } else if (o1 instanceof CSMLConcept && o2 instanceof CSMLInstance) {
                    ArrayList<CSMLDomain> sharedDomains = reasoner.sharedDomains((CSMLConcept) o1, (CSMLInstance) o2);
                    for (CSMLDomain d : sharedDomains) {
                        //dlm.addElement(d);
                        dtm.addRow(new Object[] {d, new Double(1./sharedDomains.size()), new Boolean(true), "<neutral>"});
                    }
                } else if (o1 instanceof CSMLInstance && o2 instanceof CSMLConcept) {
                    ArrayList<CSMLDomain> sharedDomains = reasoner.sharedDomains((CSMLInstance) o1, (CSMLConcept) o2);
                    for (CSMLDomain d : sharedDomains) {
                        //dlm.addElement(d);
                        dtm.addRow(new Object[] {d, new Double(1./sharedDomains.size()), new Boolean(true), "<neutral>"});
                    }
                } else if (o1 instanceof CSMLConcept && o2 instanceof CSMLConcept) {
                    ArrayList<CSMLDomain> sharedDomains = reasoner.sharedDomains((CSMLConcept) o1, (CSMLConcept) o2);
                    for (CSMLDomain d : sharedDomains) {
                        //dlm.addElement(d);
                        dtm.addRow(new Object[] {d, new Double(1./sharedDomains.size()), new Boolean(true), "<neutral>"});
                    }
                }
            } else {
                String[] domainIds = new String[0];
                if (o1 instanceof CSMLInstance) {
                    domainIds = ((CSMLInstance) o1).getDomainIds();
                } else if (o1 instanceof CSMLConcept) {
                    domainIds = ((CSMLConcept) o1).getDomainIds();
                }

                for (String domainId : domainIds) {
                    CSMLDomain d = model.getDomain(domainId);
                    if (d != null) {
                        //dlm.addElement(d);
                        dtm.addRow(new Object[] {d, new Double(1./domainIds.length), new Boolean(true), "<neutral>"});
                    }
                }

            }
        } else if (idx2 != -1) {
            Object o2 = similaritySecondElementSelectorComboBox.getSelectedItem();
            String[] domainIds = new String[0];
            if (o2 instanceof CSMLInstance) {
                domainIds = ((CSMLInstance) o2).getDomainIds();
            } else if (o2 instanceof CSMLConcept) {
                domainIds = ((CSMLConcept) o2).getDomainIds();
            }

            for (String domainId : domainIds) {
                CSMLDomain d = model.getDomain(domainId);
                if (d != null) {
                    //dlm.addElement(d);
                    dtm.addRow(new Object[] {d, new Double(1./domainIds.length), new Boolean(true), "<neutral>"});
                }
            }
        }

    }

    public void updateSimilarityDomainTypeContextComboBox() {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel) similarityDomainTypeContextComboBox.getModel();
        Object o = dcbm.getSelectedItem();
        CSMLDomainTypeContext currentDtc = null;
        if (o instanceof CSMLDomainTypeContext) {
            currentDtc = (CSMLDomainTypeContext) o;
        }
        CSMLDomainTypeContext[] dtcArray = model.getDomainTypeContexts();
        dcbm.removeAllElements();
        dcbm.addElement("<Neutral>");
        for (CSMLDomainTypeContext dtc : dtcArray) {
            dcbm.addElement(dtc);
        }
        if (currentDtc != null) {
            dcbm.setSelectedItem(currentDtc);
        }
    }

    private class DomainLabelDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateDomain(); }

        public void removeUpdate(DocumentEvent e) { updateDomain(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateDomain() {
            if (domainList.getSelectedIndex() != -1) {
                CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
                String newLabel = domainLabelTextField.getText();
                if (!newLabel.equals(d.getLabel())) {
                    d.setLabel(newLabel);
                    domainListModel.set(domainList.getSelectedIndex(), d);
                }
            }
        }
    }

    private class DomainDescriptionDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateDomain(); }

        public void removeUpdate(DocumentEvent e) { updateDomain(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateDomain() {
            if (domainList.getSelectedIndex() != -1) {
                CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
                String newDescription = domainDescriptionEditorPane.getText();
                if (!newDescription.equals(d.getDescription()))
                    d.setDescription(newDescription);
            }
        }
    }

    private class ConceptLabelDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateConcept(); }

        public void removeUpdate(DocumentEvent e) { updateConcept(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateConcept() {
            if (conceptList.getSelectedIndex() != -1) {
                CSMLConcept c = (CSMLConcept) conceptList.getSelectedValue();
                String newLabel = conceptLabelTextField.getText();
                if (!newLabel.equals(c.getLabel())) {
                    c.setLabel(newLabel);
                    conceptListModel.set(conceptList.getSelectedIndex(), c);
                }
            }
        }
    }

    private class ConceptDescriptionDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateConcept(); }

        public void removeUpdate(DocumentEvent e) { updateConcept(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateConcept() {
            if (conceptList.getSelectedIndex() != -1) {
                CSMLConcept c = (CSMLConcept) conceptList.getSelectedValue();
                String newDescription = conceptDescriptionEditorPane.getText();
                if (!newDescription.equals(c.getDescription()))
                    c.setDescription(newDescription);
            }
        }
    }

    private class DomainTypeContextLabelDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateDomainTypeContext(); }

        public void removeUpdate(DocumentEvent e) { updateDomainTypeContext(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateDomainTypeContext() {
            if (contextList.getSelectedIndex() != -1) {
                Object o = contextList.getSelectedValue();
                if (o instanceof CSMLDomainTypeContext) {
                    CSMLDomainTypeContext dtc = (CSMLDomainTypeContext) o;
                    String newLabel = domainTypeContextLabelTextField.getText();
                    if (!newLabel.equals(dtc.getLabel())) {
                        dtc.setLabel(newLabel);
                        contextListModel.set(contextList.getSelectedIndex(), dtc);
                    }
                }
            }
        }

    }

    private class DomainTypeContextDescriptionDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateDomainTypeContext(); }

        public void removeUpdate(DocumentEvent e) { updateDomainTypeContext(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateDomainTypeContext() {
            if (contextList.getSelectedIndex() != -1) {
                Object o = contextList.getSelectedValue();
                if (o instanceof CSMLDomainTypeContext) {
                    CSMLDomainTypeContext dtc = (CSMLDomainTypeContext) o;
                    String newDescription = domainTypeContextDescriptionEditorPane.getText();
                    if (!newDescription.equals(dtc.getDescription()))
                        dtc.setDescription(newDescription);
                }
            }
        }
    }

    private class QDimLabelDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateQDim(); }

        public void removeUpdate(DocumentEvent e) { updateQDim(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateQDim() {
            if (qDimList.getSelectedIndex() != -1) {
                 CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
                String newLabel = qDimLabelTextField.getText();
                if (!newLabel.equals(qDim.getLabel())) {
                    qDim.setLabel(newLabel);
                    qDimListModel.set(qDimList.getSelectedIndex(), qDim);
                }
            }
            /*
            if (!newLabel.equals(qDim.getId())) {
                CSMLDomain d = (CSMLDomain) domainList.getSelectedValue();
                if (d.getQualityDimension(text) == null) {
                    d.removeQualityDimension(qDim);
                    qDim.setId(text);
                    d.addQualityDimension(qDim);
                    qDimURILabel.setBackground(Color.WHITE);
                } else {
                    qDimURILabel.setBackground(Color.RED);
                }
                qDimListModel.setElementAt(qDim, qDimList.getSelectedIndex());
            } else {
                qDimURILabel.setBackground(Color.WHITE);
            }*/
    //    }
  //  }

   /* private class QDimDescriptionDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateQDim(); }

        public void removeUpdate(DocumentEvent e) { updateQDim(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateQDim() {
            if (qDimList.getSelectedIndex() != -1) {
                CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
                String newDescription = qDimDescriptionEditorPane.getText();
                if (!newDescription.equals(qDim.getDescription()))
                    qDim.setDescription(newDescription);
            }
        }

    }

    private class QDimMinDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateQDim(); }

        public void removeUpdate(DocumentEvent e) { updateQDim(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateQDim() {
            if (qDimList.getSelectedIndex() != -1) {
                CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
                CSML r = qDim.getRange();
                try {
                    double newMin = Double.parseDouble(qDimMinTextField.getText());
                    qDim.setRange(newMin, r.getMax());
                } catch (NumberFormatException numberFormatException) {
                    qDim.setRange(CSML.DEFAULT_MIN, r.getMax());
                }
            }
        }
    }

    private class QDimMaxDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) {
            updateQDim();
        }

        public void removeUpdate(DocumentEvent e) {
            updateQDim();
        }

        public void changedUpdate(DocumentEvent e) { }

        private void updateQDim() {
            if (qDimList.getSelectedIndex() != -1) {
                CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
                CSML r = qDim.getRange();
                String maxText = qDimMaxTextField.getText();
                try {
                    double newMax = Double.parseDouble(maxText);
                    qDim.setRange(r.getMin(), newMax);
                } catch (NumberFormatException numberFormatException) {
                    qDim.setRange(r.getMin(), CSML.DEFAULT_MAX);
                }
            }
        }
    }

    private class QDimUnitsDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) {
            updateQDim();
        }

        public void removeUpdate(DocumentEvent e) {
            updateQDim();
        }

        public void changedUpdate(DocumentEvent e) { }

        private void updateQDim() {
            if (qDimList.getSelectedIndex() != -1) {
                CSMLQualityDimension qDim = (CSMLQualityDimension) qDimList.getSelectedValue();
                String newUnits = qDimUnitsTextField.getText();
                if (!newUnits.equals(qDim.getUnits().getUnitsString()))
                    qDim.setUnits(newUnits);
            }
        }
    }

    private class InstanceLabelDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateInstance(); }

        public void removeUpdate(DocumentEvent e) { updateInstance(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateInstance() {
            if (instanceList.getSelectedIndex() != -1) {
                CSMLInstance i = (CSMLInstance) instanceList.getSelectedValue();
                String newLabel = instanceLabelTextField.getText();
                if (!newLabel.equals(i.getLabel())) {
                    i.setLabel(newLabel);
                    instanceListModel.set(instanceList.getSelectedIndex(), i);
                }
            }
        }
    }

    private class InstanceDescriptionDocumentListener implements DocumentListener {

        public void insertUpdate(DocumentEvent e) { updateInstance(); }

        public void removeUpdate(DocumentEvent e) { updateInstance(); }

        public void changedUpdate(DocumentEvent e) { }

        private void updateInstance() {
            if (instanceList.getSelectedIndex() != -1) {
                CSMLInstance i = (CSMLInstance) instanceList.getSelectedValue();
                String newDescription = instanceDescriptionEditorPane.getText();
                if (!newDescription.equals(i.getDescription()))
                    i.setDescription(newDescription);
            }
        }
    }

    private class PointsListSelectionListener implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                int row = pointsTable.getSelectedRow();
                if (row != -1) {
                    deletePointButton.setEnabled(true);
                    int modelRow = pointsTable.convertRowIndexToModel(row);
                    DefaultTableModel tm = (DefaultTableModel) pointsTable.getModel();
                    CSMLPoint p = (CSMLPoint) tm.getValueAt(modelRow, 1);
                    pointURILabel.setText(p.getId());
                    enablePointEditor(true);
                    DefaultTableModel editorTM = (DefaultTableModel) pointEditorTable.getModel();
                    editorTM.setRowCount(0);
                    if (p.isOK()) {
                        String[] q = p.getq();
                        Double[] v = p.getV();
                        CSMLDomain d = model.getDomain(p.getDomainId());
                        if (d == null) { // can't find domain in model, just use quality dimension ids
                            for (int i = 0; i < q.length; i++) {
                                editorTM.addRow(new Object[] {q[i], v[i], "", "", ""});
                            }
                        } else {
                            String[] qDimIds = d.getQualityDimensionIds();
                            for (int i = 0; i < q.length; i++) {
                                int j = 0;
                                for (; j < qDimIds.length; j++) {
                                    if (q[i].equals(qDimIds[j])) {
                                        CSMLQualityDimension qDim = d.getQualityDimension(qDimIds[j]);
                                        editorTM.addRow(new Object[] { qDim, v[i],
                                                        qDim.getUnits().getUnitsString(), 
                                                        qDim.getRange().getMin(), 
                                                        qDim.getRange().getMax() } );
                                        break;
                                    }
                                }
                                if (j == qDimIds.length) { // didn't find quality dimension id from point in model
                                    editorTM.addRow(new Object[] {q[i], v[i], "", "", ""});
                                }
                            }
                        }
                    } else {
                        // TODO: error checking
                    }
                } else {
                    deletePointButton.setEnabled(false);
                    enablePointEditor(false);
                    clearPointEditor();
                }
            }
        }

    }

    private class PointEditorTableModelListener implements TableModelListener {

        public void tableChanged(TableModelEvent e) {
            int row = e.getFirstRow();
            int col = e.getColumn();
            TableModel tm = (TableModel) e.getSource();
            if (row != -1 && col != -1 && e.getType() == TableModelEvent.UPDATE) {
                Double data = (Double) tm.getValueAt(row, col);
                int pointsRow = pointsTable.getSelectedRow();
                if (pointsRow != -1) {
                    int modelRow = pointsTable.convertRowIndexToModel(pointsRow);
                    DefaultTableModel pointsTM = (DefaultTableModel) pointsTable.getModel();
                    CSMLPoint p = (CSMLPoint) pointsTM.getValueAt(modelRow, 1);
                    Object qDimObj = tm.getValueAt(row, 0);
                    if (qDimObj instanceof String)
                        p.updateValue((String) qDimObj, data);
                    else if (qDimObj instanceof CSMLQualityDimension)
                        p.updateValue(((CSMLQualityDimension) qDimObj).getId(), data);
                }
            }
        }

    }

    private class SimilarityContextListSelectionListener implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting()) {
                int row = similarityContextTable.getSelectedRow();
                if (row != -1) {
                    similarityEditQDimTypeContextButton.setEnabled(true);
                } else {
                    similarityEditQDimTypeContextButton.setEnabled(false);
                }
            }
        }

    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CSKBEditorApplication().setVisible(true);
            }
        });
    }

    // list models
    private javax.swing.DefaultListModel domainListModel;
    private javax.swing.DefaultListModel conceptListModel;
    private javax.swing.DefaultListModel qDimListModel;
    private javax.swing.DefaultListModel instanceListModel;
    private javax.swing.DefaultListModel contextListModel;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addConceptButton;
    private javax.swing.JButton addContextButton;
    private javax.swing.JButton addDomainButton;
    private javax.swing.JButton addInstanceButton;
    private javax.swing.JButton addPointButton;
    private javax.swing.JButton addQDimButton;
    private javax.swing.JButton addRegionButton;
    private javax.swing.JLabel baseURILabel;
    private javax.swing.JTextField baseURITextField;
    private javax.swing.JPanel blankContextPanel;
    private javax.swing.JButton calculateSimilarityButton;
    private javax.swing.JPanel conceptCombinationPanel;
    private javax.swing.JEditorPane conceptDescriptionEditorPane;
    private javax.swing.JLabel conceptDescriptionLabel;
    private javax.swing.JScrollPane conceptDescriptionScrollPane;
    private javax.swing.JLabel conceptLabelLabel;
    private javax.swing.JTextField conceptLabelTextField;
    private javax.swing.JPanel conceptLeftPanel;
    private javax.swing.JScrollPane conceptLeftScrollPane;
    private javax.swing.JList conceptList;
    private javax.swing.JPanel conceptPanel;
    private javax.swing.JLabel conceptRightBottomPadLabel;
    private javax.swing.JPanel conceptRightPanel;
    private javax.swing.JSplitPane conceptSplitPane;
    private javax.swing.JPanel conceptTypeContextPanel;
    private javax.swing.JLabel conceptURILabel;
    private javax.swing.JCheckBoxMenuItem conceptsCheckBoxMenuItem;
    private javax.swing.JPanel conceptualSpaceMetricsPanel;
    private javax.swing.JScrollPane conceptualSpaceMetricsScrollPane;
    private javax.swing.JTable conceptualSpaceMetricsTable;
    private javax.swing.JPanel conceptualSpacePanel;
    private javax.swing.JPanel conceptualSpacePanel1;
    private javax.swing.JPanel conceptualSpacePanel2;
    private javax.swing.JSplitPane conceptualSpaceSplitPane;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JPanel contextLeftPanel;
    private javax.swing.JScrollPane contextLeftScrollPane;
    private javax.swing.JList contextList;
    private javax.swing.JPanel contextPanel;
    private javax.swing.JPanel contextRightPanel;
    private javax.swing.JSplitPane contextSplitPane;
    private javax.swing.JComboBox contextTypeComboBox;
    private javax.swing.JCheckBoxMenuItem contextsCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem contrastClassCheckBoxMenuItem;
    private javax.swing.JPanel contrastClassPanel;
    private javax.swing.JPanel convexHullPanel;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JButton deleteConceptButton;
    private javax.swing.JButton deleteContextButton;
    private javax.swing.JButton deleteDomainButton;
    private javax.swing.JButton deleteInstanceButton;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JButton deletePointButton;
    private javax.swing.JButton deleteQDimButton;
    private javax.swing.JButton deleteRegionButton;
    private javax.swing.JEditorPane domainDescriptionEditorPane;
    private javax.swing.JLabel domainDescriptionLabel;
    private javax.swing.JScrollPane domainDescriptionScrollPane;
    private javax.swing.JLabel domainLabelLabel;
    private javax.swing.JTextField domainLabelTextField;
    private javax.swing.JPanel domainLeftPanel;
    private javax.swing.JScrollPane domainLeftScrollPane;
    private javax.swing.JList domainList;
    private javax.swing.JPanel domainPanel;
    private javax.swing.JLabel domainRightBottomPadLabel;
    private javax.swing.JPanel domainRightPanel;
    private javax.swing.JSplitPane domainSplitPane;
    private javax.swing.JEditorPane domainTypeContextDescriptionEditorPane;
    private javax.swing.JLabel domainTypeContextDescriptionLabel;
    private javax.swing.JScrollPane domainTypeContextDescriptionScrollPane;
    private javax.swing.JLabel domainTypeContextLabelLabel;
    private javax.swing.JTextField domainTypeContextLabelTextField;
    private javax.swing.JPanel domainTypeContextPanel;
    private javax.swing.JLabel domainTypeContextURILabel;
    private javax.swing.JLabel domainURILabel;
    private javax.swing.JCheckBoxMenuItem domainsCheckBoxMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem fileExitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileNewMenuItem;
    private javax.swing.JMenuItem fileOpenMenuItem;
    private javax.swing.JMenuItem fileSaveAsMenuItem;
    private javax.swing.JMenuItem fileSaveMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JEditorPane instanceDescriptionEditorPane;
    private javax.swing.JLabel instanceDescriptionLabel;
    private javax.swing.JScrollPane instanceDescriptionScrollPane;
    private javax.swing.JLabel instanceLabelLabel;
    private javax.swing.JTextField instanceLabelTextField;
    private javax.swing.JPanel instanceLeftPanel;
    private javax.swing.JScrollPane instanceLeftScrollPane;
    private javax.swing.JList instanceList;
    private javax.swing.JPanel instancePanel;
    private javax.swing.JLabel instanceRightBottomPadLabel;
    private javax.swing.JPanel instanceRightPanel;
    private javax.swing.JSplitPane instanceSplitPane;
    private javax.swing.JPanel instanceTypeContextPanel;
    private javax.swing.JLabel instanceURILabel;
    private javax.swing.JCheckBoxMenuItem instancesCheckBoxMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTabbedPane mainPanelTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moveConceptDownButton;
    private javax.swing.JButton moveConceptUpButton;
    private javax.swing.JButton moveDomainDownButton;
    private javax.swing.JButton moveDomainUpButton;
    private javax.swing.JButton moveInstanceDownButton;
    private javax.swing.JButton moveInstanceUpButton;
    private javax.swing.JButton moveQDimDownButton;
    private javax.swing.JButton moveQDimUpButton;
    private javax.swing.JPanel operationPanel;
    private javax.swing.JComboBox operationsComboBox;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JPanel pointEditorPanel;
    private javax.swing.JScrollPane pointEditorScrollPane;
    private javax.swing.JTable pointEditorTable;
    private javax.swing.JLabel pointURILabel;
    private javax.swing.JPanel pointsPanel;
    private javax.swing.JScrollPane pointsScrollPane;
    private javax.swing.JTable pointsTable;
    private javax.swing.JPanel qDimButtonsPanel;
    private javax.swing.JCheckBox qDimCircularCheckBox;
    private javax.swing.JEditorPane qDimDescriptionEditorPane;
    private javax.swing.JLabel qDimDescriptionLabel;
    private javax.swing.JScrollPane qDimDescriptionScrollPane;
    private javax.swing.JLabel qDimLabel;
    private javax.swing.JLabel qDimLabelLabel;
    private javax.swing.JScrollPane qDimLabelScrollPane;
    private javax.swing.JTextField qDimLabelTextField;
    private javax.swing.JList qDimList;
    private javax.swing.JLabel qDimMaxLabel;
    private javax.swing.JTextField qDimMaxTextField;
    private javax.swing.JLabel qDimMinLabel;
    private javax.swing.JTextField qDimMinTextField;
    private javax.swing.JPanel qDimOptionsPanel;
    private javax.swing.ButtonGroup qDimScaleButtonGroup;
    private javax.swing.JRadioButton qDimScaleIntervalRadioButton;
    private javax.swing.JRadioButton qDimScaleOrdinalRadioButton;
    private javax.swing.JRadioButton qDimScaleRatioRadioButton;
    private javax.swing.JPanel qDimTypeContextPanel;
    private javax.swing.JLabel qDimURILabel;
    private javax.swing.JLabel qDimUnitsLabel;
    private javax.swing.JTextField qDimUnitsTextField;
    private javax.swing.JPanel rangePanel;
    private javax.swing.JCheckBoxMenuItem reasonerCheckBoxMenuItem;
    private javax.swing.JPanel reasonerPanel;
    private javax.swing.JButton refactorConceptURIButton;
    private javax.swing.JButton refactorDomainTypeContextURIButton;
    private javax.swing.JButton refactorDomainURIButton;
    private javax.swing.JButton refactorInstanceURIButton;
    private javax.swing.JButton refactorPointURIButton;
    private javax.swing.JButton refactorQDimURIButton;
    private javax.swing.JPanel regionsPanel;
    private javax.swing.JScrollPane regionsScrollPane;
    private javax.swing.JTable regionsTable;
    private javax.swing.JPanel scalePanel;
    private javax.swing.JLabel simLabel;
    private javax.swing.JPanel similarityContextPanel;
    private javax.swing.JScrollPane similarityContextScrollPane;
    private javax.swing.JTable similarityContextTable;
    private javax.swing.JButton similarityCustomDomainTypeContextButton;
    private javax.swing.JComboBox similarityDomainTypeContextComboBox;
    private javax.swing.JPanel similarityDomainTypeContextPanel;
    private javax.swing.JButton similarityEditQDimTypeContextButton;
    private javax.swing.JComboBox similarityFirstElementFilterComboBox;
    private javax.swing.JPanel similarityFirstElementFilterPanel;
    private javax.swing.JPanel similarityFirstElementPanel;
    private javax.swing.JComboBox similarityFirstElementSelectorComboBox;
    private javax.swing.JPanel similarityFirstElementSelectorPanel;
    private javax.swing.JComboBox similarityFunctionComboBox;
    private javax.swing.JLabel similarityFunctionIconLabel;
    private javax.swing.JLabel similarityFunctionLabel;
    private javax.swing.JPanel similarityNormalizationPanel;
    private javax.swing.JComboBox similarityNormalizationTypeComboBox;
    private javax.swing.JCheckBox similarityNormalizeCheckBox;
    private javax.swing.JPanel similarityOptionsPanel;
    private javax.swing.JPanel similarityPanel;
    private javax.swing.JComboBox similaritySecondElementFilterComboBox;
    private javax.swing.JPanel similaritySecondElementFilterPanel;
    private javax.swing.JPanel similaritySecondElementPanel;
    private javax.swing.JComboBox similaritySecondElementSelectorComboBox;
    private javax.swing.JPanel similaritySecondElementSelectorPanel;
    private javax.swing.JLabel similaritySensitivityParameterLabel;
    private javax.swing.JTextField similaritySensitivityParameterTextField;
    private javax.swing.JCheckBox useConceptPrototypeCheckBox;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JPanel visualizerPanel;
    private javax.swing.JPanel voronoiTessellationPanel;
    // End of variables declaration//GEN-END:variables

}
